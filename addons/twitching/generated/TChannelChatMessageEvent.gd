extends TBaseType
class_name TChannelChatMessageEvent

## Autogenerated. Do not modify.

## The broadcaster user ID.
var broadcaster_user_id: String

## The broadcaster display name.
var broadcaster_user_name: String

## The broadcaster login.
var broadcaster_user_login: String

## The user ID of the user that sent the message.
var chatter_user_id: String

## The user name of the user that sent the message.
var chatter_user_name: String

## The user login of the user that sent the message.
var chatter_user_login: String

## A UUID that identifies the message.
var message_id: String

## The structured chat message.
var message: TChannelChatMessageEventMessage

## The type of message. Possible values: <ul><li>text</li><li>channel_points_highlighted</li><li>channel_points_sub_only</li><li>user_intro</li><li>power_ups_message_effect</li><li>power_ups_gigantified_emote</li></ul>
var message_type: String

## List of chat badges.
var badges: Array[TChannelChatMessageEventBadges]

## Optional . Metadata if this message is a cheer.
var cheer: TChannelChatMessageEventCheer

## The color of the userâ€™s name in the chat room. This is a hexadecimal RGB color code in the form,  #&lt;RGB&gt; . This tag may be empty if it is never set.
var color: String

## Optional . Metadata if this message is a reply.
var reply: TChannelChatMessageEventReply

## Optional . The ID of a channel points custom reward that was redeemed.
var channel_points_custom_reward_id: String

## Optional . The broadcaster user ID of the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.
var source_broadcaster_user_id: String

## Optional . The user name of the broadcaster of the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.
var source_broadcaster_user_name: String

## Optional . The login of the broadcaster of the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.
var source_broadcaster_user_login: String

## Optional . The UUID that identifies the source message from the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.
var source_message_id: String

## Optional . The list of chat badges for the chatter in the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.
var source_badges: TChannelChatMessageEventSourceBadges

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(broadcaster_user_id: String, broadcaster_user_name: String, broadcaster_user_login: String, chatter_user_id: String, chatter_user_name: String, chatter_user_login: String, message_id: String, message: TChannelChatMessageEventMessage, message_type: String, badges: Array[TChannelChatMessageEventBadges], cheer: TChannelChatMessageEventCheer, color: String, reply: TChannelChatMessageEventReply, channel_points_custom_reward_id: String, source_broadcaster_user_id: String, source_broadcaster_user_name: String, source_broadcaster_user_login: String, source_message_id: String, source_badges: TChannelChatMessageEventSourceBadges) -> TChannelChatMessageEvent:
	var _new = TChannelChatMessageEvent.new()
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_name = broadcaster_user_name
	_new.broadcaster_user_login = broadcaster_user_login
	_new.chatter_user_id = chatter_user_id
	_new.chatter_user_name = chatter_user_name
	_new.chatter_user_login = chatter_user_login
	_new.message_id = message_id
	_new.message = message
	_new.message_type = message_type
	_new.badges = badges
	_new.cheer = cheer
	_new.color = color
	_new.reply = reply
	_new.channel_points_custom_reward_id = channel_points_custom_reward_id
	_new.source_broadcaster_user_id = source_broadcaster_user_id
	_new.source_broadcaster_user_name = source_broadcaster_user_name
	_new.source_broadcaster_user_login = source_broadcaster_user_login
	_new.source_message_id = source_message_id
	_new.source_badges = source_badges
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TChannelChatMessageEvent:
	if not obj: return
	if not obj is Dictionary:
		print("[TChannelChatMessageEvent]: Object is not Dictionary: ", obj)
		return

	var _new = TChannelChatMessageEvent.new()

	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.chatter_user_id = obj.get("chatter_user_id") if obj.get("chatter_user_id") else ""
	_new.chatter_user_name = obj.get("chatter_user_name") if obj.get("chatter_user_name") else ""
	_new.chatter_user_login = obj.get("chatter_user_login") if obj.get("chatter_user_login") else ""
	_new.message_id = obj.get("message_id") if obj.get("message_id") else ""
	_new.message = TChannelChatMessageEventMessage.from_object(obj.get("message", {}))
	_new.message_type = obj.get("message_type") if obj.get("message_type") else ""
	_new.badges = [] as Array[TChannelChatMessageEventBadges]
	for o in obj.get("badges", []):
		_new.badges.append(TChannelChatMessageEventBadges.from_object(o))
	_new.cheer = TChannelChatMessageEventCheer.from_object(obj.get("cheer", {}))
	_new.color = obj.get("color") if obj.get("color") else ""
	_new.reply = TChannelChatMessageEventReply.from_object(obj.get("reply", {}))
	_new.channel_points_custom_reward_id = obj.get("channel_points_custom_reward_id") if obj.get("channel_points_custom_reward_id") else ""
	_new.source_broadcaster_user_id = obj.get("source_broadcaster_user_id") if obj.get("source_broadcaster_user_id") else ""
	_new.source_broadcaster_user_name = obj.get("source_broadcaster_user_name") if obj.get("source_broadcaster_user_name") else ""
	_new.source_broadcaster_user_login = obj.get("source_broadcaster_user_login") if obj.get("source_broadcaster_user_login") else ""
	_new.source_message_id = obj.get("source_message_id") if obj.get("source_message_id") else ""
	_new.source_badges = TChannelChatMessageEventSourceBadges.from_object(obj.get("source_badges", {}))

	return _new
