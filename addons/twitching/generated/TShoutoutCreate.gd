extends TBaseType
class_name TShoutoutCreate

## Autogenerated. Do not modify.

## An ID that identifies the broadcaster that sent the Shoutout.
var broadcaster_user_id: String

## The broadcaster’s login name.
var broadcaster_user_login: String

## The broadcaster’s display name.
var broadcaster_user_name: String

## An ID that identifies the broadcaster that received the Shoutout.
var to_broadcaster_user_id: String

## The broadcaster’s login name.
var to_broadcaster_user_login: String

## The broadcaster’s display name.
var to_broadcaster_user_name: String

## An ID that identifies the moderator that sent the Shoutout. If the broadcaster sent the Shoutout, this ID is the same as the ID in  broadcaster_user_id .
var moderator_user_id: String

## The moderator’s login name.
var moderator_user_login: String

## The moderator’s display name.
var moderator_user_name: String

## The number of users that were watching the broadcaster’s stream at the time of the Shoutout.
var viewer_count: int

## The UTC timestamp (in RFC3339 format) of when the moderator sent the Shoutout.
var started_at: String

## The UTC timestamp (in RFC3339 format) of when the broadcaster may send a Shoutout to a different broadcaster.
var cooldown_ends_at: String

## The UTC timestamp (in RFC3339 format) of when the broadcaster may send another Shoutout to the broadcaster in  to_broadcaster_user_id .
var target_cooldown_ends_at: String

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(broadcaster_user_id: String, broadcaster_user_login: String, broadcaster_user_name: String, to_broadcaster_user_id: String, to_broadcaster_user_login: String, to_broadcaster_user_name: String, moderator_user_id: String, moderator_user_login: String, moderator_user_name: String, viewer_count: int, started_at: String, cooldown_ends_at: String, target_cooldown_ends_at: String) -> TShoutoutCreate:
	var _new = TShoutoutCreate.new()
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_login = broadcaster_user_login
	_new.broadcaster_user_name = broadcaster_user_name
	_new.to_broadcaster_user_id = to_broadcaster_user_id
	_new.to_broadcaster_user_login = to_broadcaster_user_login
	_new.to_broadcaster_user_name = to_broadcaster_user_name
	_new.moderator_user_id = moderator_user_id
	_new.moderator_user_login = moderator_user_login
	_new.moderator_user_name = moderator_user_name
	_new.viewer_count = viewer_count
	_new.started_at = started_at
	_new.cooldown_ends_at = cooldown_ends_at
	_new.target_cooldown_ends_at = target_cooldown_ends_at
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TShoutoutCreate:
	if not obj: return
	if not obj is Dictionary:
		print("[TShoutoutCreate]: Object is not Dictionary: ", obj)
		return

	var _new = TShoutoutCreate.new()

	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.to_broadcaster_user_id = obj.get("to_broadcaster_user_id") if obj.get("to_broadcaster_user_id") else ""
	_new.to_broadcaster_user_login = obj.get("to_broadcaster_user_login") if obj.get("to_broadcaster_user_login") else ""
	_new.to_broadcaster_user_name = obj.get("to_broadcaster_user_name") if obj.get("to_broadcaster_user_name") else ""
	_new.moderator_user_id = obj.get("moderator_user_id") if obj.get("moderator_user_id") else ""
	_new.moderator_user_login = obj.get("moderator_user_login") if obj.get("moderator_user_login") else ""
	_new.moderator_user_name = obj.get("moderator_user_name") if obj.get("moderator_user_name") else ""
	_new.viewer_count = obj.get("viewer_count") if obj.get("viewer_count") else 0
	_new.started_at = obj.get("started_at") if obj.get("started_at") else ""
	_new.cooldown_ends_at = obj.get("cooldown_ends_at") if obj.get("cooldown_ends_at") else ""
	_new.target_cooldown_ends_at = obj.get("target_cooldown_ends_at") if obj.get("target_cooldown_ends_at") else ""

	return _new
