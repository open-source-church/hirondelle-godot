extends TBaseType
class_name TAutomodMessageUpdateEventV2

## Autogenerated. Do not modify.

## The ID of the broadcaster specified in the request.
var broadcaster_user_id: String

## The login of the broadcaster specified in the request.
var broadcaster_user_login: String

## The user name of the broadcaster specified in the request.
var broadcaster_user_name: String

## The message sender’s user ID.
var user_id: String

## The message sender’s login name.
var user_login: String

## The message sender’s display name.
var user_name: String

## The ID of the moderator.
var moderator_user_id: String

## TThe moderator’s user name.
var moderator_user_name: String

## The login of the moderator.
var moderator_user_login: String

## The ID of the message that was flagged by automod.
var message_id: String

## The body of the message.
var message: Array[TAutomodMessageUpdateEventV2Message]

## The message’s status. Possible values are: Approved Denied Expired
var status: String

## The timestamp of when automod saved the message.
var held_at: String

## The reason why the message was caught. Possible values are:  automod blocked_term
var reason: String

## Optional. If the message was caught by automod, this will be populated.
var automod: TAutomodMessageUpdateEventV2Automod

## Optional. If the message was caught due to a blocked term, this will be populated.
var blocked_term: TAutomodMessageUpdateEventV2BlockedTerm

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(broadcaster_user_id: String, broadcaster_user_login: String, broadcaster_user_name: String, user_id: String, user_login: String, user_name: String, moderator_user_id: String, moderator_user_name: String, moderator_user_login: String, message_id: String, message: Array[TAutomodMessageUpdateEventV2Message], status: String, held_at: String, reason: String, automod: TAutomodMessageUpdateEventV2Automod, blocked_term: TAutomodMessageUpdateEventV2BlockedTerm) -> TAutomodMessageUpdateEventV2:
	var _new = TAutomodMessageUpdateEventV2.new()
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_login = broadcaster_user_login
	_new.broadcaster_user_name = broadcaster_user_name
	_new.user_id = user_id
	_new.user_login = user_login
	_new.user_name = user_name
	_new.moderator_user_id = moderator_user_id
	_new.moderator_user_name = moderator_user_name
	_new.moderator_user_login = moderator_user_login
	_new.message_id = message_id
	_new.message = message
	_new.status = status
	_new.held_at = held_at
	_new.reason = reason
	_new.automod = automod
	_new.blocked_term = blocked_term
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TAutomodMessageUpdateEventV2:
	if not obj: return
	if not obj is Dictionary:
		print("[TAutomodMessageUpdateEventV2]: Object is not Dictionary: ", obj)
		return

	var _new = TAutomodMessageUpdateEventV2.new()

	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.user_id = obj.get("user_id") if obj.get("user_id") else ""
	_new.user_login = obj.get("user_login") if obj.get("user_login") else ""
	_new.user_name = obj.get("user_name") if obj.get("user_name") else ""
	_new.moderator_user_id = obj.get("moderator_user_id") if obj.get("moderator_user_id") else ""
	_new.moderator_user_name = obj.get("moderator_user_name") if obj.get("moderator_user_name") else ""
	_new.moderator_user_login = obj.get("moderator_user_login") if obj.get("moderator_user_login") else ""
	_new.message_id = obj.get("message_id") if obj.get("message_id") else ""
	_new.message = [] as Array[TAutomodMessageUpdateEventV2Message]
	for o in obj.get("message", []):
		_new.message.append(TAutomodMessageUpdateEventV2Message.from_object(o))
	_new.status = obj.get("status") if obj.get("status") else ""
	_new.held_at = obj.get("held_at") if obj.get("held_at") else ""
	_new.reason = obj.get("reason") if obj.get("reason") else ""
	_new.automod = TAutomodMessageUpdateEventV2Automod.from_object(obj.get("automod", {}))
	_new.blocked_term = TAutomodMessageUpdateEventV2BlockedTerm.from_object(obj.get("blocked_term", {}))

	return _new
