extends TBaseType
class_name TChannelBanEvent

## Autogenerated. Do not modify.

## The user ID for the user who was banned on the specified channel.
var user_id: String

## The user login for the user who was banned on the specified channel.
var user_login: String

## The user display name for the user who was banned on the specified channel.
var user_name: String

## The requested broadcaster ID.
var broadcaster_user_id: String

## The requested broadcaster login.
var broadcaster_user_login: String

## The requested broadcaster display name.
var broadcaster_user_name: String

## The user ID of the issuer of the ban.
var moderator_user_id: String

## The user login of the issuer of the ban.
var moderator_user_login: String

## The user name of the issuer of the ban.
var moderator_user_name: String

## The reason behind the ban.
var reason: String

## The UTC date and time (in RFC3339 format) of when the user was banned or put in a timeout.
var banned_at: String

## The UTC date and time (in RFC3339 format) of when the timeout ends. Is  null  if the user was banned instead of put in a timeout.
var ends_at: String

## Indicates whether the ban is permanent (true) or a timeout (false). If true,  ends_at  will be null.
var is_permanent: bool

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(user_id: String, user_login: String, user_name: String, broadcaster_user_id: String, broadcaster_user_login: String, broadcaster_user_name: String, moderator_user_id: String, moderator_user_login: String, moderator_user_name: String, reason: String, banned_at: String, ends_at: String, is_permanent: bool) -> TChannelBanEvent:
	var _new = TChannelBanEvent.new()
	_new.user_id = user_id
	_new.user_login = user_login
	_new.user_name = user_name
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_login = broadcaster_user_login
	_new.broadcaster_user_name = broadcaster_user_name
	_new.moderator_user_id = moderator_user_id
	_new.moderator_user_login = moderator_user_login
	_new.moderator_user_name = moderator_user_name
	_new.reason = reason
	_new.banned_at = banned_at
	_new.ends_at = ends_at
	_new.is_permanent = is_permanent
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TChannelBanEvent:
	if not obj: return
	if not obj is Dictionary:
		print("[TChannelBanEvent]: Object is not Dictionary: ", obj)
		return

	var _new = TChannelBanEvent.new()

	_new.user_id = obj.get("user_id") if obj.get("user_id") else ""
	_new.user_login = obj.get("user_login") if obj.get("user_login") else ""
	_new.user_name = obj.get("user_name") if obj.get("user_name") else ""
	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.moderator_user_id = obj.get("moderator_user_id") if obj.get("moderator_user_id") else ""
	_new.moderator_user_login = obj.get("moderator_user_login") if obj.get("moderator_user_login") else ""
	_new.moderator_user_name = obj.get("moderator_user_name") if obj.get("moderator_user_name") else ""
	_new.reason = obj.get("reason") if obj.get("reason") else ""
	_new.banned_at = obj.get("banned_at") if obj.get("banned_at") else ""
	_new.ends_at = obj.get("ends_at") if obj.get("ends_at") else ""
	_new.is_permanent = obj.get("is_permanent") if obj.get("is_permanent") else null

	return _new
