extends TBaseType
class_name TChannelPointsCustomRewardUpdateEvent

## Autogenerated. Do not modify.

## The reward identifier.
var id: String

## The requested broadcaster ID.
var broadcaster_user_id: String

## The requested broadcaster login.
var broadcaster_user_login: String

## The requested broadcaster display name.
var broadcaster_user_name: String

## Is the reward currently enabled. If false, the reward won’t show up to viewers.
var is_enabled: bool

## Is the reward currently paused. If true, viewers can’t redeem.
var is_paused: bool

## Is the reward currently in stock. If false, viewers can’t redeem.
var is_in_stock: bool

## The reward title.
var title: String

## The reward cost.
var cost: int

## The reward description.
var prompt: String

## Does the viewer need to enter information when redeeming the reward.
var is_user_input_required: bool

## Should redemptions be set to  fulfilled  status immediately when redeemed and skip the request queue instead of the normal  unfulfilled  status.
var should_redemptions_skip_request_queue: bool

## Whether a maximum per stream is enabled and what the maximum is.
var max_per_stream: TMaxPerStream

## Whether a maximum per user per stream is enabled and what the maximum is.
var max_per_user_per_stream: TMaxPerUserPerStream

## Custom background color for the reward. Format: Hex with # prefix. Example:  #FA1ED2 .
var background_color: String

## Set of custom images of 1x, 2x and 4x sizes for the reward. Can be  null  if no images have been uploaded.
var image: TImage

## Set of default images of 1x, 2x and 4x sizes for the reward.
var default_image: TImage

## Whether a cooldown is enabled and what the cooldown is in seconds.
var global_cooldown: TGlobalCooldown

## Timestamp of the cooldown expiration.  null  if the reward isn’t on cooldown.
var cooldown_expires_at: String

## The number of redemptions redeemed during the current live stream. Counts against the  max_per_stream  limit.  null  if the broadcasters stream isn’t live or  max_per_stream  isn’t enabled.
var redemptions_redeemed_current_stream: int

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(id: String, broadcaster_user_id: String, broadcaster_user_login: String, broadcaster_user_name: String, is_enabled: bool, is_paused: bool, is_in_stock: bool, title: String, cost: int, prompt: String, is_user_input_required: bool, should_redemptions_skip_request_queue: bool, max_per_stream: TMaxPerStream, max_per_user_per_stream: TMaxPerUserPerStream, background_color: String, image: TImage, default_image: TImage, global_cooldown: TGlobalCooldown, cooldown_expires_at: String, redemptions_redeemed_current_stream: int) -> TChannelPointsCustomRewardUpdateEvent:
	var _new = TChannelPointsCustomRewardUpdateEvent.new()
	_new.id = id
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_login = broadcaster_user_login
	_new.broadcaster_user_name = broadcaster_user_name
	_new.is_enabled = is_enabled
	_new.is_paused = is_paused
	_new.is_in_stock = is_in_stock
	_new.title = title
	_new.cost = cost
	_new.prompt = prompt
	_new.is_user_input_required = is_user_input_required
	_new.should_redemptions_skip_request_queue = should_redemptions_skip_request_queue
	_new.max_per_stream = max_per_stream
	_new.max_per_user_per_stream = max_per_user_per_stream
	_new.background_color = background_color
	_new.image = image
	_new.default_image = default_image
	_new.global_cooldown = global_cooldown
	_new.cooldown_expires_at = cooldown_expires_at
	_new.redemptions_redeemed_current_stream = redemptions_redeemed_current_stream
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TChannelPointsCustomRewardUpdateEvent:
	if not obj: return
	if not obj is Dictionary:
		print("[TChannelPointsCustomRewardUpdateEvent]: Object is not Dictionary: ", obj)
		return

	var _new = TChannelPointsCustomRewardUpdateEvent.new()

	_new.id = obj.get("id") if obj.get("id") else ""
	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.is_enabled = obj.get("is_enabled") if obj.get("is_enabled") else null
	_new.is_paused = obj.get("is_paused") if obj.get("is_paused") else null
	_new.is_in_stock = obj.get("is_in_stock") if obj.get("is_in_stock") else null
	_new.title = obj.get("title") if obj.get("title") else ""
	_new.cost = obj.get("cost") if obj.get("cost") else 0
	_new.prompt = obj.get("prompt") if obj.get("prompt") else ""
	_new.is_user_input_required = obj.get("is_user_input_required") if obj.get("is_user_input_required") else null
	_new.should_redemptions_skip_request_queue = obj.get("should_redemptions_skip_request_queue") if obj.get("should_redemptions_skip_request_queue") else null
	_new.max_per_stream = TMaxPerStream.from_object(obj.get("max_per_stream", {}))
	_new.max_per_user_per_stream = TMaxPerUserPerStream.from_object(obj.get("max_per_user_per_stream", {}))
	_new.background_color = obj.get("background_color") if obj.get("background_color") else ""
	_new.image = TImage.from_object(obj.get("image", {}))
	_new.default_image = TImage.from_object(obj.get("default_image", {}))
	_new.global_cooldown = TGlobalCooldown.from_object(obj.get("global_cooldown", {}))
	_new.cooldown_expires_at = obj.get("cooldown_expires_at") if obj.get("cooldown_expires_at") else ""
	_new.redemptions_redeemed_current_stream = obj.get("redemptions_redeemed_current_stream") if obj.get("redemptions_redeemed_current_stream") else 0

	return _new
