extends TBaseType
class_name TChannelModerateEventV2

## Autogenerated. Do not modify.

## The ID of the broadcaster.
var broadcaster_user_id: String

## The login of the broadcaster.
var broadcaster_user_login: String

## The user name of the broadcaster.
var broadcaster_user_name: String

## The channel in which the action originally occurred. Is the same as the broadcaster_user_id if not in shared chat.
var source_broadcaster_user_id: String

## The channel in which the action originally occurred. Is the same as the broadcaster_user_login if not in shared chat.
var source_broadcaster_user_login: String

## The channel in which the action originally occurred. Is null when the moderator action happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.
var source_broadcaster_user_name: String

## The ID of the moderator who performed the action.
var moderator_user_id: String

## The login of the moderator.
var moderator_user_login: String

## The user name of the moderator.
var moderator_user_name: String

## The action performed. Possible values are:  ban timeout unban untimeout clear emoteonly emoteonlyoff followers followersoff uniquechat uniquechatoff slow slowoff subscribers subscribersoff unraid delete unvip vip raid add_blocked_term add_permitted_term remove_blocked_term remove_permitted_term mod unmod approve_unban_request deny_unban_request warn shared_chat_ban shared_chat_timeout shared_chat_unban shared_chat_untimeout shared_chat_delete
var action: String

## Optional . Metadata associated with the followers command.
var followers: TChannelModerateEventV2Followers

## Optional . Metadata associated with the slow command.
var slow: TChannelModerateEventV2Slow

## Optional . Metadata associated with the vip command.
var vip: TChannelModerateEventV2Vip

## Optional . Metadata associated with the unvip command.
var unvip: TChannelModerateEventV2Unvip

## Optional . Metadata associated with the mod command.
var mod: TChannelModerateEventV2Mod

## Optional . Metadata associated with the unmod command.
var unmod: TChannelModerateEventV2Unmod

## Optional . Metadata associated with the ban command.
var ban: TChannelModerateEventV2Ban

## Optional . Metadata associated with the unban command.
var unban: TChannelModerateEventV2Unban

## Optional . Metadata associated with the timeout command.
var timeout: TChannelModerateEventV2Timeout

## Optional . Metadata associated with the untimeout command.
var untimeout: TChannelModerateEventV2Untimeout

## Optional . Metadata associated with the raid command.
var raid: TChannelModerateEventV2Raid

## Optional . Metadata associated with the unraid command.
var unraid: TChannelModerateEventV2Unraid

## Optional . Metadata associated with the delete command.
var delete: TChannelModerateEventV2Delete

## Optional . Metadata associated with the automod terms changes.
var automod_terms: TChannelModerateEventV2AutomodTerms

## Optional . Metadata associated with an unban request.
var unban_request: TChannelModerateEventV2UnbanRequest

## Optional . Metadata associated with the warn command.
var warn: TChannelModerateEventV2Warn

## Optional . Information about the  shared_chat_ban  event. Is null if  action  is not  shared_chat_ban . This field has the same information as the  ban  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition.
var shared_chat_ban: Variant

## Optional . Information about the  shared_chat_unban  event. Is null if  action  is not  shared_chat_unban . This field has the same information as the  unban  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition.
var shared_chat_unban: Variant

## Optional . Information about the  shared_chat_timeout  event. Is null if  action  is not  shared_chat_timeout . This field has the same information as the  timeout  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition.
var shared_chat_timeout: Variant

## Optional . Information about the  shared_chat_untimeout  event. Is null if  action  is not  shared_chat_untimeout . This field has the same information as the  untimeout  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition.
var shared_chat_untimeout: Variant

## Optional . Information about the  shared_chat_delete  event. Is null if  action  is not  shared_chat_delete . This field has the same information as the  delete  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition.
var shared_chat_delete: Variant

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(broadcaster_user_id: String, broadcaster_user_login: String, broadcaster_user_name: String, source_broadcaster_user_id: String, source_broadcaster_user_login: String, source_broadcaster_user_name: String, moderator_user_id: String, moderator_user_login: String, moderator_user_name: String, action: String, followers: TChannelModerateEventV2Followers, slow: TChannelModerateEventV2Slow, vip: TChannelModerateEventV2Vip, unvip: TChannelModerateEventV2Unvip, mod: TChannelModerateEventV2Mod, unmod: TChannelModerateEventV2Unmod, ban: TChannelModerateEventV2Ban, unban: TChannelModerateEventV2Unban, timeout: TChannelModerateEventV2Timeout, untimeout: TChannelModerateEventV2Untimeout, raid: TChannelModerateEventV2Raid, unraid: TChannelModerateEventV2Unraid, delete: TChannelModerateEventV2Delete, automod_terms: TChannelModerateEventV2AutomodTerms, unban_request: TChannelModerateEventV2UnbanRequest, warn: TChannelModerateEventV2Warn, shared_chat_ban: Variant, shared_chat_unban: Variant, shared_chat_timeout: Variant, shared_chat_untimeout: Variant, shared_chat_delete: Variant) -> TChannelModerateEventV2:
	var _new = TChannelModerateEventV2.new()
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_login = broadcaster_user_login
	_new.broadcaster_user_name = broadcaster_user_name
	_new.source_broadcaster_user_id = source_broadcaster_user_id
	_new.source_broadcaster_user_login = source_broadcaster_user_login
	_new.source_broadcaster_user_name = source_broadcaster_user_name
	_new.moderator_user_id = moderator_user_id
	_new.moderator_user_login = moderator_user_login
	_new.moderator_user_name = moderator_user_name
	_new.action = action
	_new.followers = followers
	_new.slow = slow
	_new.vip = vip
	_new.unvip = unvip
	_new.mod = mod
	_new.unmod = unmod
	_new.ban = ban
	_new.unban = unban
	_new.timeout = timeout
	_new.untimeout = untimeout
	_new.raid = raid
	_new.unraid = unraid
	_new.delete = delete
	_new.automod_terms = automod_terms
	_new.unban_request = unban_request
	_new.warn = warn
	_new.shared_chat_ban = shared_chat_ban
	_new.shared_chat_unban = shared_chat_unban
	_new.shared_chat_timeout = shared_chat_timeout
	_new.shared_chat_untimeout = shared_chat_untimeout
	_new.shared_chat_delete = shared_chat_delete
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TChannelModerateEventV2:
	if not obj: return
	if not obj is Dictionary:
		print("[TChannelModerateEventV2]: Object is not Dictionary: ", obj)
		return

	var _new = TChannelModerateEventV2.new()

	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.source_broadcaster_user_id = obj.get("source_broadcaster_user_id") if obj.get("source_broadcaster_user_id") else ""
	_new.source_broadcaster_user_login = obj.get("source_broadcaster_user_login") if obj.get("source_broadcaster_user_login") else ""
	_new.source_broadcaster_user_name = obj.get("source_broadcaster_user_name") if obj.get("source_broadcaster_user_name") else ""
	_new.moderator_user_id = obj.get("moderator_user_id") if obj.get("moderator_user_id") else ""
	_new.moderator_user_login = obj.get("moderator_user_login") if obj.get("moderator_user_login") else ""
	_new.moderator_user_name = obj.get("moderator_user_name") if obj.get("moderator_user_name") else ""
	_new.action = obj.get("action") if obj.get("action") else ""
	_new.followers = TChannelModerateEventV2Followers.from_object(obj.get("followers", {}))
	_new.slow = TChannelModerateEventV2Slow.from_object(obj.get("slow", {}))
	_new.vip = TChannelModerateEventV2Vip.from_object(obj.get("vip", {}))
	_new.unvip = TChannelModerateEventV2Unvip.from_object(obj.get("unvip", {}))
	_new.mod = TChannelModerateEventV2Mod.from_object(obj.get("mod", {}))
	_new.unmod = TChannelModerateEventV2Unmod.from_object(obj.get("unmod", {}))
	_new.ban = TChannelModerateEventV2Ban.from_object(obj.get("ban", {}))
	_new.unban = TChannelModerateEventV2Unban.from_object(obj.get("unban", {}))
	_new.timeout = TChannelModerateEventV2Timeout.from_object(obj.get("timeout", {}))
	_new.untimeout = TChannelModerateEventV2Untimeout.from_object(obj.get("untimeout", {}))
	_new.raid = TChannelModerateEventV2Raid.from_object(obj.get("raid", {}))
	_new.unraid = TChannelModerateEventV2Unraid.from_object(obj.get("unraid", {}))
	_new.delete = TChannelModerateEventV2Delete.from_object(obj.get("delete", {}))
	_new.automod_terms = TChannelModerateEventV2AutomodTerms.from_object(obj.get("automod_terms", {}))
	_new.unban_request = TChannelModerateEventV2UnbanRequest.from_object(obj.get("unban_request", {}))
	_new.warn = TChannelModerateEventV2Warn.from_object(obj.get("warn", {}))
	_new.shared_chat_ban = obj.get("shared_chat_ban") if obj.get("shared_chat_ban") else null
	_new.shared_chat_unban = obj.get("shared_chat_unban") if obj.get("shared_chat_unban") else null
	_new.shared_chat_timeout = obj.get("shared_chat_timeout") if obj.get("shared_chat_timeout") else null
	_new.shared_chat_untimeout = obj.get("shared_chat_untimeout") if obj.get("shared_chat_untimeout") else null
	_new.shared_chat_delete = obj.get("shared_chat_delete") if obj.get("shared_chat_delete") else null

	return _new
