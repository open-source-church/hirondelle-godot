extends RefCounted
class_name TwitchingSubs

## Autogenerated list of subscription types.
##
## Used to create twitch EventSub subscriptions.[br]
## Use with one of the static vars.[br]
## [codeblock]
## var condition = TChannelChatMessageCondition.new()
## condition.broadcaster_user_id = "499044140"
## condition.user_id = "499044140"
## # subscriber is the subscriber in Twitching.eventsub.subscriber
## await TwitchingSubs.CHANNEL_CHAT_MESSAGE.subscribe(subscriber, condition)
## [/codeblock]
## You can also write:
## [codeblock]
## var condition = TChannelChatMessageCondition.create("499044140", "499044140")
## await TwitchingSubs.CHANNEL_CHAT_MESSAGE.subscribe(subscriber, condition)
## [/codeblock]

class Sub:
	var type: String
	var name: String
	var version: String
	var description: String
	var payload_class: RefCounted
	var condition_class: RefCounted

	func _init(_type: String, _name: String, _version: String, _description: String, _payload_class: RefCounted, _condition_class: RefCounted):
		type = _type
		name = _name
		version = _version
		description = _description
		payload_class = _payload_class
		condition_class = _condition_class

	func subscribe(subscriber: TwitchingEventSubSubscriber, condition: TBaseType):
		return await subscriber.subscribe(type, version, condition.to_object())

## A user is notified if a message is caught by automod for review.[br]
## See [TAutomodMessageHoldCondition] and [TAutomodMessageHoldEvent].
static var AUTOMOD_MESSAGE_HOLD := Sub.new("automod.message.hold", "Automod Message Hold", "1", "A user is notified if a message is caught by automod for review.", TAutomodMessageHoldEvent, TAutomodMessageHoldCondition)

## A user is notified if a message is caught by automod for review.  Only public blocked terms trigger notifications, not private ones.[br]
## See [TAutomodMessageHoldCondition] and [TAutomodMessageHoldEvent].
static var AUTOMOD_MESSAGE_HOLD_V2 := Sub.new("automod.message.hold", "Automod Message Hold V2", "2", "A user is notified if a message is caught by automod for review.  Only public blocked terms trigger notifications, not private ones.", TAutomodMessageHoldEvent, TAutomodMessageHoldCondition)

## A message in the automod queue had its status changed.[br]
## See [TAutomodMessageUpdateCondition] and [TAutomodMessageUpdateEvent].
static var AUTOMOD_MESSAGE_UPDATE := Sub.new("automod.message.update", "Automod Message Update", "1", "A message in the automod queue had its status changed.", TAutomodMessageUpdateEvent, TAutomodMessageUpdateCondition)

## A message in the automod queue had its status changed. Only public blocked terms trigger notifications, not private ones.[br]
## See [TAutomodMessageUpdateCondition] and [TAutomodMessageUpdateEvent].
static var AUTOMOD_MESSAGE_UPDATE_V2 := Sub.new("automod.message.update", "Automod Message Update V2", "2", "A message in the automod queue had its status changed. Only public blocked terms trigger notifications, not private ones.", TAutomodMessageUpdateEvent, TAutomodMessageUpdateCondition)

## A notification is sent when a broadcaster’s automod settings are updated.[br]
## See [TAutomodSettingsUpdateCondition] and [TAutomodSettingsUpdateEvent].
static var AUTOMOD_SETTINGS_UPDATE := Sub.new("automod.settings.update", "Automod Settings Update", "1", "A notification is sent when a broadcaster’s automod settings are updated.", TAutomodSettingsUpdateEvent, TAutomodSettingsUpdateCondition)

## A notification is sent when a broadcaster’s automod terms are updated. Changes to private terms are not sent.[br]
## See [TAutomodTermsUpdateCondition] and [TAutomodTermsUpdateEvent].
static var AUTOMOD_TERMS_UPDATE := Sub.new("automod.terms.update", "Automod Terms Update", "1", "A notification is sent when a broadcaster’s automod terms are updated. Changes to private terms are not sent.", TAutomodTermsUpdateEvent, TAutomodTermsUpdateCondition)

## None[br]
## See [TChannelUpdateCondition] and [TChannelUpdateEvent].
static var CHANNEL_UPDATE := Sub.new("channel.update", "Channel Update", "2", "None", TChannelUpdateEvent, TChannelUpdateCondition)

## A specified channel receives a follow.[br]
## See [TChannelFollowCondition] and [TChannelFollowEvent].
static var CHANNEL_FOLLOW := Sub.new("channel.follow", "Channel Follow", "2", "A specified channel receives a follow.", TChannelFollowEvent, TChannelFollowCondition)

## A midroll commercial break has started running.[br]
## See [TChannelAdBreakBeginCondition] and [TChannelAdBreakBeginEvent].
static var CHANNEL_AD_BREAK_BEGIN := Sub.new("channel.ad_break.begin", "Channel Ad Break Begin", "1", "A midroll commercial break has started running.", TChannelAdBreakBeginEvent, TChannelAdBreakBeginCondition)

## A moderator or bot has cleared all messages from the chat room.[br]
## See [TChannelChatClearCondition] and [TChannelChatClearEvent].
static var CHANNEL_CHAT_CLEAR := Sub.new("channel.chat.clear", "Channel Chat Clear", "1", "A moderator or bot has cleared all messages from the chat room.", TChannelChatClearEvent, TChannelChatClearCondition)

## A moderator or bot has cleared all messages from a specific user.[br]
## See [TChannelChatClearUserMessagesCondition] and [TChannelChatClearUserMessagesEvent].
static var CHANNEL_CHAT_CLEAR_USER_MESSAGES := Sub.new("channel.chat.clear_user_messages", "Channel Chat Clear User Messages", "1", "A moderator or bot has cleared all messages from a specific user.", TChannelChatClearUserMessagesEvent, TChannelChatClearUserMessagesCondition)

## Any user sends a message to a specific chat room.[br]
## See [TChannelChatMessageCondition] and [TChannelChatMessageEvent].
static var CHANNEL_CHAT_MESSAGE := Sub.new("channel.chat.message", "Channel Chat Message", "1", "Any user sends a message to a specific chat room.", TChannelChatMessageEvent, TChannelChatMessageCondition)

## A moderator has removed a specific message.[br]
## See [TChannelChatMessageDeleteCondition] and [TChannelChatMessageDeleteEvent].
static var CHANNEL_CHAT_MESSAGE_DELETE := Sub.new("channel.chat.message_delete", "Channel Chat Message Delete", "1", "A moderator has removed a specific message.", TChannelChatMessageDeleteEvent, TChannelChatMessageDeleteCondition)

## A notification for when an event that appears in chat has occurred.[br]
## See [TChannelChatNotificationCondition] and [TChannelChatNotificationEvent].
static var CHANNEL_CHAT_NOTIFICATION := Sub.new("channel.chat.notification", "Channel Chat Notification", "1", "A notification for when an event that appears in chat has occurred.", TChannelChatNotificationEvent, TChannelChatNotificationCondition)

## A notification for when a broadcaster’s chat settings are updated.[br]
## See [TChannelChatSettingsUpdateCondition] and [TChannelChatSettingsUpdateEvent].
static var CHANNEL_CHAT_SETTINGS_UPDATE := Sub.new("channel.chat_settings.update", "Channel Chat Settings Update", "1", "A notification for when a broadcaster’s chat settings are updated.", TChannelChatSettingsUpdateEvent, TChannelChatSettingsUpdateCondition)

## A user is notified if their message is caught by automod.[br]
## See [TChannelChatUserMessageHoldCondition] and [TChannelChatUserMessageHoldEvent].
static var CHANNEL_CHAT_USER_MESSAGE_HOLD := Sub.new("channel.chat.user_message_hold", "Channel Chat User Message Hold", "1", "A user is notified if their message is caught by automod.", TChannelChatUserMessageHoldEvent, TChannelChatUserMessageHoldCondition)

## A user is notified if their message’s automod status is updated.[br]
## See [TChannelChatUserMessageUpdateCondition] and [TChannelChatUserMessageUpdateEvent].
static var CHANNEL_CHAT_USER_MESSAGE_UPDATE := Sub.new("channel.chat.user_message_update", "Channel Chat User Message Update", "1", "A user is notified if their message’s automod status is updated.", TChannelChatUserMessageUpdateEvent, TChannelChatUserMessageUpdateCondition)

## A notification when a channel becomes active in an active shared chat session.[br]
## See [TChannelSharedChatSessionBeginCondition] and [TChannelSharedChatSessionBeginEvent].
static var CHANNEL_SHARED_CHAT_SESSION_BEGIN := Sub.new("channel.shared_chat.begin", "Channel Shared Chat Session Begin", "1", "A notification when a channel becomes active in an active shared chat session.", TChannelSharedChatSessionBeginEvent, TChannelSharedChatSessionBeginCondition)

## A notification when the active shared chat session the channel is in changes.[br]
## See [TChannelSharedChatSessionUpdateCondition] and [TChannelSharedChatSessionUpdateEvent].
static var CHANNEL_SHARED_CHAT_SESSION_UPDATE := Sub.new("channel.shared_chat.update", "Channel Shared Chat Session Update", "1", "A notification when the active shared chat session the channel is in changes.", TChannelSharedChatSessionUpdateEvent, TChannelSharedChatSessionUpdateCondition)

## A notification when a channel leaves a shared chat session or the session ends.[br]
## See [TChannelSharedChatSessionEndCondition] and [TChannelSharedChatSessionEndEvent].
static var CHANNEL_SHARED_CHAT_SESSION_END := Sub.new("channel.shared_chat.end", "Channel Shared Chat Session End", "1", "A notification when a channel leaves a shared chat session or the session ends.", TChannelSharedChatSessionEndEvent, TChannelSharedChatSessionEndCondition)

## A notification is sent when a specified channel receives a subscriber. This does not include resubscribes.[br]
## See [TChannelSubscribeCondition] and [TChannelSubscribeEvent].
static var CHANNEL_SUBSCRIBE := Sub.new("channel.subscribe", "Channel Subscribe", "1", "A notification is sent when a specified channel receives a subscriber. This does not include resubscribes.", TChannelSubscribeEvent, TChannelSubscribeCondition)

## A notification when a subscription to the specified channel ends.[br]
## See [TChannelSubscriptionEndCondition] and [TChannelSubscriptionEndEvent].
static var CHANNEL_SUBSCRIPTION_END := Sub.new("channel.subscription.end", "Channel Subscription End", "1", "A notification when a subscription to the specified channel ends.", TChannelSubscriptionEndEvent, TChannelSubscriptionEndCondition)

## A notification when a viewer gives a gift subscription to one or more users in the specified channel.[br]
## See [TChannelSubscriptionGiftCondition] and [TChannelSubscriptionGiftEvent].
static var CHANNEL_SUBSCRIPTION_GIFT := Sub.new("channel.subscription.gift", "Channel Subscription Gift", "1", "A notification when a viewer gives a gift subscription to one or more users in the specified channel.", TChannelSubscriptionGiftEvent, TChannelSubscriptionGiftCondition)

## A notification when a user sends a resubscription chat message in a specific channel.[br]
## See [TChannelSubscriptionMessageCondition] and [TChannelSubscriptionMessageEvent].
static var CHANNEL_SUBSCRIPTION_MESSAGE := Sub.new("channel.subscription.message", "Channel Subscription Message", "1", "A notification when a user sends a resubscription chat message in a specific channel.", TChannelSubscriptionMessageEvent, TChannelSubscriptionMessageCondition)

## A user cheers on the specified channel.[br]
## See [TChannelCheerCondition] and [TChannelCheerEvent].
static var CHANNEL_CHEER := Sub.new("channel.cheer", "Channel Cheer", "1", "A user cheers on the specified channel.", TChannelCheerEvent, TChannelCheerCondition)

## A broadcaster raids another broadcaster’s channel.[br]
## See [TChannelRaidCondition] and [TChannelRaidEvent].
static var CHANNEL_RAID := Sub.new("channel.raid", "Channel Raid", "1", "A broadcaster raids another broadcaster’s channel.", TChannelRaidEvent, TChannelRaidCondition)

## A viewer is banned from the specified channel.[br]
## See [TChannelBanCondition] and [TChannelBanEvent].
static var CHANNEL_BAN := Sub.new("channel.ban", "Channel Ban", "1", "A viewer is banned from the specified channel.", TChannelBanEvent, TChannelBanCondition)

## A viewer is unbanned from the specified channel.[br]
## See [TChannelUnbanCondition] and [TChannelUnbanEvent].
static var CHANNEL_UNBAN := Sub.new("channel.unban", "Channel Unban", "1", "A viewer is unbanned from the specified channel.", TChannelUnbanEvent, TChannelUnbanCondition)

## A user creates an unban request.[br]
## See [TAutomodMessageHoldCondition] and [TAutomodMessageHoldEvent].
static var CHANNEL_UNBAN_REQUEST_CREATE := Sub.new("None", "Channel Unban Request Create", "1", "A user creates an unban request.", TAutomodMessageHoldEvent, TAutomodMessageHoldCondition)

## An unban request has been resolved.[br]
## See [TAutomodMessageHoldCondition] and [TAutomodMessageHoldEvent].
static var CHANNEL_UNBAN_REQUEST_RESOLVE := Sub.new("None", "Channel Unban Request Resolve", "1", "An unban request has been resolved.", TAutomodMessageHoldEvent, TAutomodMessageHoldCondition)

## A moderator performs a moderation action in a channel.[br]
## See [TChannelModerateCondition] and [TChannelModerateEvent].
static var CHANNEL_MODERATE := Sub.new("channel.moderate", "Channel Moderate", "1", "A moderator performs a moderation action in a channel.", TChannelModerateEvent, TChannelModerateCondition)

## A moderator performs a moderation action in a channel. Includes warnings.[br]
## See [TChannelModerateCondition] and [TChannelModerateEvent].
static var CHANNEL_MODERATE_V2 := Sub.new("channel.moderate", "Channel Moderate V2", "2", "A moderator performs a moderation action in a channel. Includes warnings.", TChannelModerateEvent, TChannelModerateCondition)

## Moderator privileges were added to a user on a specified channel.[br]
## See [TChannelModeratorAddCondition] and [TChannelModeratorAddEvent].
static var CHANNEL_MODERATOR_ADD := Sub.new("channel.moderator.add", "Channel Moderator Add", "1", "Moderator privileges were added to a user on a specified channel.", TChannelModeratorAddEvent, TChannelModeratorAddCondition)

## Moderator privileges were removed from a user on a specified channel.[br]
## See [TChannelModeratorRemoveCondition] and [TChannelModeratorRemoveEvent].
static var CHANNEL_MODERATOR_REMOVE := Sub.new("channel.moderator.remove", "Channel Moderator Remove", "1", "Moderator privileges were removed from a user on a specified channel.", TChannelModeratorRemoveEvent, TChannelModeratorRemoveCondition)

## The host began a new Guest Star session.[br]
## See [TChannelGuestStarSessionBeginCondition] and [TChannelGuestStarSessionBeginEvent].
static var CHANNEL_GUEST_STAR_SESSION_BEGIN := Sub.new("channel.guest_star_session.begin", "Channel Guest Star Session Begin", "beta", "The host began a new Guest Star session.", TChannelGuestStarSessionBeginEvent, TChannelGuestStarSessionBeginCondition)

## A running Guest Star session has ended.[br]
## See [TChannelGuestStarSessionEndCondition] and [TChannelGuestStarSessionEndEvent].
static var CHANNEL_GUEST_STAR_SESSION_END := Sub.new("channel.guest_star_session.end", "Channel Guest Star Session End", "beta", "A running Guest Star session has ended.", TChannelGuestStarSessionEndEvent, TChannelGuestStarSessionEndCondition)

## A guest or a slot is updated in an active Guest Star session.[br]
## See [TChannelGuestStarGuestUpdateCondition] and [TChannelGuestStarGuestUpdateEvent].
static var CHANNEL_GUEST_STAR_GUEST_UPDATE := Sub.new("channel.guest_star_guest.update", "Channel Guest Star Guest Update", "beta", "A guest or a slot is updated in an active Guest Star session.", TChannelGuestStarGuestUpdateEvent, TChannelGuestStarGuestUpdateCondition)

## The host preferences for Guest Star have been updated.[br]
## See [TChannelGuestStarSettingsUpdateCondition] and [TChannelGuestStarSettingsUpdateEvent].
static var CHANNEL_GUEST_STAR_SETTINGS_UPDATE := Sub.new("channel.guest_star_settings.update", "Channel Guest Star Settings Update", "beta", "The host preferences for Guest Star have been updated.", TChannelGuestStarSettingsUpdateEvent, TChannelGuestStarSettingsUpdateCondition)

## A viewer has redeemed an automatic channel points reward on the specified channel.[br]
## See [TChannelPointsAutomaticRewardRedemptionAddCondition] and [TChannelPointsAutomaticRewardRedemptionAddEvent].
static var CHANNEL_POINTS_AUTOMATIC_REWARD_REDEMPTION := Sub.new("channel.channel_points_automatic_reward_redemption.add", "Channel Points Automatic Reward Redemption", "1", "A viewer has redeemed an automatic channel points reward on the specified channel.", TChannelPointsAutomaticRewardRedemptionAddEvent, TChannelPointsAutomaticRewardRedemptionAddCondition)

## A custom channel points reward has been created for the specified channel.[br]
## See [TChannelPointsCustomRewardAddCondition] and [TChannelPointsCustomRewardAddEvent].
static var CHANNEL_POINTS_CUSTOM_REWARD_ADD := Sub.new("channel.channel_points_custom_reward.add", "Channel Points Custom Reward Add", "1", "A custom channel points reward has been created for the specified channel.", TChannelPointsCustomRewardAddEvent, TChannelPointsCustomRewardAddCondition)

## A custom channel points reward has been updated for the specified channel.[br]
## See [TChannelPointsCustomRewardUpdateCondition] and [TChannelPointsCustomRewardUpdateEvent].
static var CHANNEL_POINTS_CUSTOM_REWARD_UPDATE := Sub.new("channel.channel_points_custom_reward.update", "Channel Points Custom Reward Update", "1", "A custom channel points reward has been updated for the specified channel.", TChannelPointsCustomRewardUpdateEvent, TChannelPointsCustomRewardUpdateCondition)

## A custom channel points reward has been removed from the specified channel.[br]
## See [TChannelPointsCustomRewardRemoveCondition] and [TChannelPointsCustomRewardRemoveEvent].
static var CHANNEL_POINTS_CUSTOM_REWARD_REMOVE := Sub.new("channel.channel_points_custom_reward.remove", "Channel Points Custom Reward Remove", "1", "A custom channel points reward has been removed from the specified channel.", TChannelPointsCustomRewardRemoveEvent, TChannelPointsCustomRewardRemoveCondition)

## A viewer has redeemed a custom channel points reward on the specified channel.[br]
## See [TChannelPointsCustomRewardRedemptionAddCondition] and [TChannelPointsCustomRewardRedemptionAddEvent].
static var CHANNEL_POINTS_CUSTOM_REWARD_REDEMPTION_ADD := Sub.new("channel.channel_points_custom_reward_redemption.add", "Channel Points Custom Reward Redemption Add", "1", "A viewer has redeemed a custom channel points reward on the specified channel.", TChannelPointsCustomRewardRedemptionAddEvent, TChannelPointsCustomRewardRedemptionAddCondition)

## A redemption of a channel points custom reward has been updated for the specified channel.[br]
## See [TChannelPointsCustomRewardRedemptionUpdateCondition] and [TChannelPointsCustomRewardRedemptionUpdateEvent].
static var CHANNEL_POINTS_CUSTOM_REWARD_REDEMPTION_UPDATE := Sub.new("channel.channel_points_custom_reward_redemption.update", "Channel Points Custom Reward Redemption Update", "1", "A redemption of a channel points custom reward has been updated for the specified channel.", TChannelPointsCustomRewardRedemptionUpdateEvent, TChannelPointsCustomRewardRedemptionUpdateCondition)

## A poll started on a specified channel.[br]
## See [TChannelPollBeginCondition] and [TChannelPollBeginEvent].
static var CHANNEL_POLL_BEGIN := Sub.new("channel.poll.begin", "Channel Poll Begin", "1", "A poll started on a specified channel.", TChannelPollBeginEvent, TChannelPollBeginCondition)

## Users respond to a poll on a specified channel.[br]
## See [TChannelPollProgressCondition] and [TChannelPollProgressEvent].
static var CHANNEL_POLL_PROGRESS := Sub.new("channel.poll.progress", "Channel Poll Progress", "1", "Users respond to a poll on a specified channel.", TChannelPollProgressEvent, TChannelPollProgressCondition)

## A poll ended on a specified channel.[br]
## See [TChannelPollEndCondition] and [TChannelPollEndEvent].
static var CHANNEL_POLL_END := Sub.new("channel.poll.end", "Channel Poll End", "1", "A poll ended on a specified channel.", TChannelPollEndEvent, TChannelPollEndCondition)

## A Prediction started on a specified channel.[br]
## See [TChannelPredictionBeginCondition] and [TChannelPredictionBeginEvent].
static var CHANNEL_PREDICTION_BEGIN := Sub.new("channel.prediction.begin", "Channel Prediction Begin", "1", "A Prediction started on a specified channel.", TChannelPredictionBeginEvent, TChannelPredictionBeginCondition)

## Users participated in a Prediction on a specified channel.[br]
## See [TChannelPredictionProgressCondition] and [TChannelPredictionProgressEvent].
static var CHANNEL_PREDICTION_PROGRESS := Sub.new("channel.prediction.progress", "Channel Prediction Progress", "1", "Users participated in a Prediction on a specified channel.", TChannelPredictionProgressEvent, TChannelPredictionProgressCondition)

## A Prediction was locked on a specified channel.[br]
## See [TChannelPredictionLockCondition] and [TChannelPredictionLockEvent].
static var CHANNEL_PREDICTION_LOCK := Sub.new("channel.prediction.lock", "Channel Prediction Lock", "1", "A Prediction was locked on a specified channel.", TChannelPredictionLockEvent, TChannelPredictionLockCondition)

## A Prediction ended on a specified channel.[br]
## See [TChannelPredictionEndCondition] and [TChannelPredictionEndEvent].
static var CHANNEL_PREDICTION_END := Sub.new("channel.prediction.end", "Channel Prediction End", "1", "A Prediction ended on a specified channel.", TChannelPredictionEndEvent, TChannelPredictionEndCondition)

## A chat message has been sent by a suspicious user.[br]
## See [TChannelSuspiciousUserMessageCondition] and [TChannelSuspiciousUserMessageEvent].
static var CHANNEL_SUSPICIOUS_USER_MESSAGE := Sub.new("channel.suspicious_user.message", "Channel Suspicious User Message", "1", "A chat message has been sent by a suspicious user.", TChannelSuspiciousUserMessageEvent, TChannelSuspiciousUserMessageCondition)

## A suspicious user has been updated.[br]
## See [TChannelSuspiciousUserUpdateCondition] and [TChannelSuspiciousUserUpdateEvent].
static var CHANNEL_SUSPICIOUS_USER_UPDATE := Sub.new("channel.suspicious_user.update", "Channel Suspicious User Update", "1", "A suspicious user has been updated.", TChannelSuspiciousUserUpdateEvent, TChannelSuspiciousUserUpdateCondition)

## A VIP is added to the channel.[br]
## See [TChannelVipAddCondition] and [TChannelVipAddEvent].
static var CHANNEL_VIP_ADD := Sub.new("channel.vip.add", "Channel VIP Add", "1", "A VIP is added to the channel.", TChannelVipAddEvent, TChannelVipAddCondition)

## A VIP is removed from the channel.[br]
## See [TChannelVipRemoveCondition] and [TChannelVipRemoveEvent].
static var CHANNEL_VIP_REMOVE := Sub.new("channel.vip.remove", "Channel VIP Remove", "1", "A VIP is removed from the channel.", TChannelVipRemoveEvent, TChannelVipRemoveCondition)

## A user awknowledges a warning. Broadcasters and moderators can see the warning’s details.[br]
## See [TChannelWarningAcknowledgeCondition] and [TChannelWarningAcknowledgeEvent].
static var CHANNEL_WARNING_ACKNOWLEDGEMENT := Sub.new("channel.warning.acknowledge", "Channel Warning Acknowledgement", "1", "A user awknowledges a warning. Broadcasters and moderators can see the warning’s details.", TChannelWarningAcknowledgeEvent, TChannelWarningAcknowledgeCondition)

## A user is sent a warning. Broadcasters and moderators can see the warning’s details.[br]
## See [TChannelWarningSendCondition] and [TChannelWarningSendEvent].
static var CHANNEL_WARNING_SEND := Sub.new("channel.warning.send", "Channel Warning Send", "1", "A user is sent a warning. Broadcasters and moderators can see the warning’s details.", TChannelWarningSendEvent, TChannelWarningSendCondition)

## Sends an event notification when a user donates to the broadcaster’s charity campaign.[br]
## See [TCharityDonationCondition] and [TCharityDonationEvent].
static var CHARITY_DONATION := Sub.new("channel.charity_campaign.donate", "Charity Donation", "1", "Sends an event notification when a user donates to the broadcaster’s charity campaign.", TCharityDonationEvent, TCharityDonationCondition)

## Sends an event notification when the broadcaster starts a charity campaign.[br]
## See [TCharityCampaignStartCondition] and [TCharityCampaignStartEvent].
static var CHARITY_CAMPAIGN_START := Sub.new("channel.charity_campaign.start", "Charity Campaign Start", "1", "Sends an event notification when the broadcaster starts a charity campaign.", TCharityCampaignStartEvent, TCharityCampaignStartCondition)

## Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal.[br]
## See [TCharityCampaignProgressCondition] and [TCharityCampaignProgressEvent].
static var CHARITY_CAMPAIGN_PROGRESS := Sub.new("channel.charity_campaign.progress", "Charity Campaign Progress", "1", "Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal.", TCharityCampaignProgressEvent, TCharityCampaignProgressCondition)

## Sends an event notification when the broadcaster stops a charity campaign.[br]
## See [TCharityCampaignStopCondition] and [TCharityCampaignStopEvent].
static var CHARITY_CAMPAIGN_STOP := Sub.new("channel.charity_campaign.stop", "Charity Campaign Stop", "1", "Sends an event notification when the broadcaster stops a charity campaign.", TCharityCampaignStopEvent, TCharityCampaignStopCondition)

## Sends a notification when EventSub disables a shard due to the status of the underlying transport changing.[br]
## See [TConduitShardDisabledCondition] and [TConduitShardDisabledEvent].
static var CONDUIT_SHARD_DISABLED := Sub.new("conduit.shard.disabled", "Conduit Shard Disabled", "1", "Sends a notification when EventSub disables a shard due to the status of the underlying transport changing.", TConduitShardDisabledEvent, TConduitShardDisabledCondition)

## An entitlement for a Drop is granted to a user.[br]
## See [TDropEntitlementGrantCondition] and [TDropEntitlementGrantEvent].
static var DROP_ENTITLEMENT_GRANT := Sub.new("drop.entitlement.grant", "Drop Entitlement Grant", "1", "An entitlement for a Drop is granted to a user.", TDropEntitlementGrantEvent, TDropEntitlementGrantCondition)

## A Bits transaction occurred for a specified Twitch Extension.[br]
## See [TExtensionBitsTransactionCreateCondition] and [TExtensionBitsTransactionCreateEvent].
static var EXTENSION_BITS_TRANSACTION_CREATE := Sub.new("extension.bits_transaction.create", "Extension Bits Transaction Create", "1", "A Bits transaction occurred for a specified Twitch Extension.", TExtensionBitsTransactionCreateEvent, TExtensionBitsTransactionCreateCondition)

## Get notified when a broadcaster begins a goal.[br]
## See [TGoalsCondition] and [TGoalsEvent].
static var GOAL_BEGIN := Sub.new("channel.goal.begin", "Goal Begin", "1", "Get notified when a broadcaster begins a goal.", TGoalsEvent, TGoalsCondition)

## Get notified when progress (either positive or negative) is made towards a broadcaster’s goal.[br]
## See [TGoalsCondition] and [TGoalsEvent].
static var GOAL_PROGRESS := Sub.new("channel.goal.progress", "Goal Progress", "1", "Get notified when progress (either positive or negative) is made towards a broadcaster’s goal.", TGoalsEvent, TGoalsCondition)

## Get notified when a broadcaster ends a goal.[br]
## See [TGoalsCondition] and [TGoalsEvent].
static var GOAL_END := Sub.new("channel.goal.end", "Goal End", "1", "Get notified when a broadcaster ends a goal.", TGoalsEvent, TGoalsCondition)

## A Hype Train begins on the specified channel.[br]
## See [THypeTrainBeginCondition] and [THypeTrainBeginEvent].
static var HYPE_TRAIN_BEGIN := Sub.new("channel.hype_train.begin", "Hype Train Begin", "1", "A Hype Train begins on the specified channel.", THypeTrainBeginEvent, THypeTrainBeginCondition)

## A Hype Train makes progress on the specified channel.[br]
## See [THypeTrainProgressCondition] and [THypeTrainProgressEvent].
static var HYPE_TRAIN_PROGRESS := Sub.new("channel.hype_train.progress", "Hype Train Progress", "1", "A Hype Train makes progress on the specified channel.", THypeTrainProgressEvent, THypeTrainProgressCondition)

## A Hype Train ends on the specified channel.[br]
## See [THypeTrainEndCondition] and [THypeTrainEndEvent].
static var HYPE_TRAIN_END := Sub.new("channel.hype_train.end", "Hype Train End", "1", "A Hype Train ends on the specified channel.", THypeTrainEndEvent, THypeTrainEndCondition)

## Sends a notification when the broadcaster activates Shield Mode.[br]
## See [TShieldModeBeginCondition] and [TShieldMode].
static var SHIELD_MODE_BEGIN := Sub.new("channel.shield_mode.begin", "Shield Mode Begin", "1", "Sends a notification when the broadcaster activates Shield Mode.", TShieldMode, TShieldModeBeginCondition)

## Sends a notification when the broadcaster deactivates Shield Mode.[br]
## See [TShieldModeEndCondition] and [TShieldMode].
static var SHIELD_MODE_END := Sub.new("channel.shield_mode.end", "Shield Mode End", "1", "Sends a notification when the broadcaster deactivates Shield Mode.", TShieldMode, TShieldModeEndCondition)

## Sends a notification when the specified broadcaster sends a Shoutout.[br]
## See [TShoutoutCreateCondition] and [TShoutoutCreate].
static var SHOUTOUT_CREATE := Sub.new("channel.shoutout.create", "Shoutout Create", "1", "Sends a notification when the specified broadcaster sends a Shoutout.", TShoutoutCreate, TShoutoutCreateCondition)

## Sends a notification when the specified broadcaster receives a Shoutout.[br]
## See [TShoutoutReceivedCondition] and [TShoutoutReceived].
static var SHOUTOUT_RECEIVED := Sub.new("channel.shoutout.receive", "Shoutout Received", "1", "Sends a notification when the specified broadcaster receives a Shoutout.", TShoutoutReceived, TShoutoutReceivedCondition)

## The specified broadcaster starts a stream.[br]
## See [TStreamOnlineCondition] and [TStreamOnlineEvent].
static var STREAM_ONLINE := Sub.new("stream.online", "Stream Online", "1", "The specified broadcaster starts a stream.", TStreamOnlineEvent, TStreamOnlineCondition)

## The specified broadcaster stops a stream.[br]
## See [TStreamOfflineCondition] and [TStreamOfflineEvent].
static var STREAM_OFFLINE := Sub.new("stream.offline", "Stream Offline", "1", "The specified broadcaster stops a stream.", TStreamOfflineEvent, TStreamOfflineCondition)

## A user’s authorization has been granted to your client id.[br]
## See [TUserAuthorizationGrantCondition] and [TUserAuthorizationGrantEvent].
static var USER_AUTHORIZATION_GRANT := Sub.new("user.authorization.grant", "User Authorization Grant", "1", "A user’s authorization has been granted to your client id.", TUserAuthorizationGrantEvent, TUserAuthorizationGrantCondition)

## A user’s authorization has been revoked for your client id.[br]
## See [TUserAuthorizationRevokeCondition] and [TUserAuthorizationRevokeEvent].
static var USER_AUTHORIZATION_REVOKE := Sub.new("user.authorization.revoke", "User Authorization Revoke", "1", "A user’s authorization has been revoked for your client id.", TUserAuthorizationRevokeEvent, TUserAuthorizationRevokeCondition)

## A user has updated their account.[br]
## See [TUserUpdateCondition] and [TUserUpdateEvent].
static var USER_UPDATE := Sub.new("user.update", "User Update", "1", "A user has updated their account.", TUserUpdateEvent, TUserUpdateCondition)

## A user receives a whisper.[br]
## See [TWhisperReceivedCondition] and [TWhisperReceivedEvent].
static var WHISPER_RECEIVED := Sub.new("user.whisper.message", "Whisper Received", "1", "A user receives a whisper.", TWhisperReceivedEvent, TWhisperReceivedCondition)

