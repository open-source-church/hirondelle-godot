extends TBaseType
class_name TGoalsEvent

## Autogenerated. Do not modify.

## An ID that identifies this event.
var id: String

## An ID that uniquely identifies the broadcaster.
var broadcaster_user_id: String

## The broadcaster’s display name.
var broadcaster_user_name: String

## The broadcaster’s user handle.
var broadcaster_user_login: String

## The type of goal. Possible values are:  follow — The goal is to increase followers. subscription — The goal is to increase subscriptions. This type shows the net increase or decrease in tier points associated with the subscriptions. subscription_count — The goal is to increase subscriptions. This type shows the net increase or decrease in the number of subscriptions. new_subscription — The goal is to increase subscriptions. This type shows only the net increase in tier points associated with the subscriptions (it does not account for users that unsubscribed since the goal started). new_subscription_count — The goal is to increase subscriptions. This type shows only the net increase in the number of subscriptions (it does not account for users that unsubscribed since the goal started). new_bit — The goal is to increase the amount of Bits used on the channel. new_cheerer — The goal is to increase the number of unique Cheerers to Cheer on the channel.
var type: String

## A description of the goal, if specified. The description may contain a maximum of 40 characters.
var description: String

## A Boolean value that indicates whether the broadcaster achieved their goal. Is  true  if the goal was achieved; otherwise,  false . Only the  channel.goal.end  event includes this field.
var is_achieved: bool

## The goal’s current value. The goal’s  type  determines how this value is increased or decreased. If  type  is follow, this field is set to the broadcaster's current number of followers. This number increases with new followers and decreases when users unfollow the broadcaster. If  type  is subscription, this field is increased and decreased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased or decreased by 2, not 1. If  type  is subscription_count, this field is increased by 1 for each new subscription and decreased by 1 for each user that unsubscribes. If  type  is new_subscription, this field is increased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased by 2, not 1. If  type  is new_subscription_count, this field is increased by 1 for each new subscription.
var current_amount: int

## The goal’s target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400.
var target_amount: int

## The UTC timestamp in  RFC 3339  format, which indicates when the broadcaster created the goal.
var started_at: String

## The UTC timestamp in  RFC 3339  format, which indicates when the broadcaster ended the goal. Only the  channel.goal.end  event includes this field.
var ended_at: String

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(id: String, broadcaster_user_id: String, broadcaster_user_name: String, broadcaster_user_login: String, type: String, description: String, is_achieved: bool, current_amount: int, target_amount: int, started_at: String, ended_at: String) -> TGoalsEvent:
	var _new = TGoalsEvent.new()
	_new.id = id
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_name = broadcaster_user_name
	_new.broadcaster_user_login = broadcaster_user_login
	_new.type = type
	_new.description = description
	_new.is_achieved = is_achieved
	_new.current_amount = current_amount
	_new.target_amount = target_amount
	_new.started_at = started_at
	_new.ended_at = ended_at
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TGoalsEvent:
	if not obj: return
	if not obj is Dictionary:
		print("[TGoalsEvent]: Object is not Dictionary: ", obj)
		return

	var _new = TGoalsEvent.new()

	_new.id = obj.get("id") if obj.get("id") else ""
	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.type = obj.get("type") if obj.get("type") else ""
	_new.description = obj.get("description") if obj.get("description") else ""
	_new.is_achieved = obj.get("is_achieved") if obj.get("is_achieved") else null
	_new.current_amount = obj.get("current_amount") if obj.get("current_amount") else 0
	_new.target_amount = obj.get("target_amount") if obj.get("target_amount") else 0
	_new.started_at = obj.get("started_at") if obj.get("started_at") else ""
	_new.ended_at = obj.get("ended_at") if obj.get("ended_at") else ""

	return _new
