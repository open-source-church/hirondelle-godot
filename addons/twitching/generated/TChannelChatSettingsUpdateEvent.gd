extends TBaseType
class_name TChannelChatSettingsUpdateEvent

## Autogenerated. Do not modify.

## The ID of the broadcaster specified in the request.
var broadcaster_user_id: String

## The login of the broadcaster specified in the request.
var broadcaster_user_login: String

## The user name of the broadcaster specified in the request.
var broadcaster_user_name: String

## A Boolean value that determines whether chat messages must contain only emotes. True if only messages that are 100% emotes are allowed; otherwise false.
var emote_mode: bool

## A Boolean value that determines whether the broadcaster restricts the chat room to followers only, based on how long they’ve followed. True if the broadcaster restricts the chat room to followers only; otherwise false. See  follower_mode_duration_minutes  for how long the followers must have followed the broadcaster to participate in the chat room.
var follower_mode: bool

## The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room. See  follower_mode . Null if  follower_mode  is false.
var follower_mode_duration_minutes: int

## A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages. Is true, if the broadcaster applies a delay; otherwise, false. See  slow_mode_wait_time_seconds  for the delay.
var slow_mode: bool

## The amount of time, in seconds, that users need to wait between sending messages. See  slow_mode . Null if  slow_mode  is false.
var slow_mode_wait_time_seconds: int

## A Boolean value that determines whether only users that subscribe to the broadcaster’s channel can talk in the chat room. True if the broadcaster restricts the chat room to subscribers only; otherwise false.
var subscriber_mode: bool

## A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room. True if the broadcaster requires unique messages only; otherwise false.
var unique_chat_mode: bool

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(broadcaster_user_id: String, broadcaster_user_login: String, broadcaster_user_name: String, emote_mode: bool, follower_mode: bool, follower_mode_duration_minutes: int, slow_mode: bool, slow_mode_wait_time_seconds: int, subscriber_mode: bool, unique_chat_mode: bool) -> TChannelChatSettingsUpdateEvent:
	var _new = TChannelChatSettingsUpdateEvent.new()
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_login = broadcaster_user_login
	_new.broadcaster_user_name = broadcaster_user_name
	_new.emote_mode = emote_mode
	_new.follower_mode = follower_mode
	_new.follower_mode_duration_minutes = follower_mode_duration_minutes
	_new.slow_mode = slow_mode
	_new.slow_mode_wait_time_seconds = slow_mode_wait_time_seconds
	_new.subscriber_mode = subscriber_mode
	_new.unique_chat_mode = unique_chat_mode
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TChannelChatSettingsUpdateEvent:
	if not obj: return
	if not obj is Dictionary:
		print("[TChannelChatSettingsUpdateEvent]: Object is not Dictionary: ", obj)
		return

	var _new = TChannelChatSettingsUpdateEvent.new()

	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.emote_mode = obj.get("emote_mode") if obj.get("emote_mode") else null
	_new.follower_mode = obj.get("follower_mode") if obj.get("follower_mode") else null
	_new.follower_mode_duration_minutes = obj.get("follower_mode_duration_minutes") if obj.get("follower_mode_duration_minutes") else 0
	_new.slow_mode = obj.get("slow_mode") if obj.get("slow_mode") else null
	_new.slow_mode_wait_time_seconds = obj.get("slow_mode_wait_time_seconds") if obj.get("slow_mode_wait_time_seconds") else 0
	_new.subscriber_mode = obj.get("subscriber_mode") if obj.get("subscriber_mode") else null
	_new.unique_chat_mode = obj.get("unique_chat_mode") if obj.get("unique_chat_mode") else null

	return _new
