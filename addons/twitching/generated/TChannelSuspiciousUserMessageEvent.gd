extends TBaseType
class_name TChannelSuspiciousUserMessageEvent

## Autogenerated. Do not modify.

## The ID of the channel where the treatment for a suspicious user was updated.
var broadcaster_user_id: String

## The display name of the channel where the treatment for a suspicious user was updated.
var broadcaster_user_name: String

## The login of the channel where the treatment for a suspicious user was updated.
var broadcaster_user_login: String

## The user ID of the user that sent the message.
var user_id: String

## The user name of the user that sent the message.
var user_name: String

## The user login of the user that sent the message.
var user_login: String

## The status set for the suspicious user. Can be the following: “none”, “active_monitoring”, or “restricted”
var low_trust_status: String

## A list of channel IDs where the suspicious user is also banned.
var shared_ban_channel_ids: Array[String]

## User types (if any) that apply to the suspicious user, can be “manual”, “ban_evader_detector”, or “shared_channel_ban”.
var types: Array[String]

## A ban evasion likelihood value (if any) that as been applied to the user automatically by Twitch, can be “unknown”, “possible”, or “likely”.
var ban_evasion_evaluation: String

## The structured chat message.
var message: TChannelSuspiciousUserMessageEventMessage

## Create is similar to _init but takes parameters. Useful for using with autocomplete in the editor.
static func create(broadcaster_user_id: String, broadcaster_user_name: String, broadcaster_user_login: String, user_id: String, user_name: String, user_login: String, low_trust_status: String, shared_ban_channel_ids: Array[String], types: Array[String], ban_evasion_evaluation: String, message: TChannelSuspiciousUserMessageEventMessage) -> TChannelSuspiciousUserMessageEvent:
	var _new = TChannelSuspiciousUserMessageEvent.new()
	_new.broadcaster_user_id = broadcaster_user_id
	_new.broadcaster_user_name = broadcaster_user_name
	_new.broadcaster_user_login = broadcaster_user_login
	_new.user_id = user_id
	_new.user_name = user_name
	_new.user_login = user_login
	_new.low_trust_status = low_trust_status
	_new.shared_ban_channel_ids = shared_ban_channel_ids
	_new.types = types
	_new.ban_evasion_evaluation = ban_evasion_evaluation
	_new.message = message
	return _new

## Create from object (usually returned from api)
static func from_object(obj: Variant) -> TChannelSuspiciousUserMessageEvent:
	if not obj: return
	if not obj is Dictionary:
		print("[TChannelSuspiciousUserMessageEvent]: Object is not Dictionary: ", obj)
		return

	var _new = TChannelSuspiciousUserMessageEvent.new()

	_new.broadcaster_user_id = obj.get("broadcaster_user_id") if obj.get("broadcaster_user_id") else ""
	_new.broadcaster_user_name = obj.get("broadcaster_user_name") if obj.get("broadcaster_user_name") else ""
	_new.broadcaster_user_login = obj.get("broadcaster_user_login") if obj.get("broadcaster_user_login") else ""
	_new.user_id = obj.get("user_id") if obj.get("user_id") else ""
	_new.user_name = obj.get("user_name") if obj.get("user_name") else ""
	_new.user_login = obj.get("user_login") if obj.get("user_login") else ""
	_new.low_trust_status = obj.get("low_trust_status") if obj.get("low_trust_status") else ""
	_new.shared_ban_channel_ids = [] as Array[String]
	for o in obj.get("shared_ban_channel_ids", []):
		_new.shared_ban_channel_ids.append(o)
	_new.types = [] as Array[String]
	for o in obj.get("types", []):
		_new.types.append(o)
	_new.ban_evasion_evaluation = obj.get("ban_evasion_evaluation") if obj.get("ban_evasion_evaluation") else ""
	_new.message = TChannelSuspiciousUserMessageEventMessage.from_object(obj.get("message", {}))

	return _new
