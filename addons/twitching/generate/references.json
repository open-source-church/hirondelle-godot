[
  {
    "name": "Request fields",
    "id": "request-fields",
    "params": [
      {
        "name": "type",
        "type": "string",
        "description": "The subscription type name.",
        "required": "yes"
      },
      {
        "name": "version",
        "type": "string",
        "description": "The subscription type version:\u00a0 1 .",
        "required": "yes"
      },
      {
        "name": "condition",
        "type": "condition",
        "description": "Subscription-specific parameters. The parameters inside this object differ by subscription type and may differ by version.",
        "required": "yes",
        "link": "#conditions",
        "id": "conditions"
      },
      {
        "name": "transport",
        "type": "transport",
        "description": "Transport-specific parameters.",
        "required": "yes",
        "link": "#transport",
        "id": "transport",
        "class_name": "TTransport"
      }
    ],
    "class_name": "TRequestFields",
    "doclink": "#request-fields"
  },
  {
    "name": "Response fields",
    "id": "response-fields",
    "params": [
      {
        "name": "subscription",
        "type": "subscription",
        "description": "Contains subscription metadata.",
        "link": "#subscription",
        "id": "subscription",
        "class_name": "TSubscription"
      },
      {
        "name": "event",
        "type": "event",
        "description": "The event information. The fields inside this object differ by subscription type.",
        "link": "#events",
        "id": "events"
      }
    ],
    "class_name": "TResponseFields",
    "doclink": "#response-fields"
  },
  {
    "name": "Bits Voting",
    "id": "bits-voting",
    "params": [
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Not used; will be set to  false ."
      },
      {
        "name": "amount_per_vote",
        "type": "integer",
        "description": "Not used; will be set to 0."
      }
    ],
    "class_name": "TBitsVoting",
    "doclink": "#bits-voting"
  },
  {
    "name": "Channel Points Voting",
    "id": "channel-points-voting",
    "params": [
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Indicates if Channel Points can be used for voting."
      },
      {
        "name": "amount_per_vote",
        "type": "integer",
        "description": "Number of Channel Points required to vote once with Channel Points."
      }
    ],
    "class_name": "TChannelPointsVoting",
    "doclink": "#channel-points-voting"
  },
  {
    "name": "Choices",
    "id": "choices",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "ID for the choice."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Text displayed for the choice."
      },
      {
        "name": "bits_votes",
        "type": "integer",
        "description": "Not used; will be set to 0."
      },
      {
        "name": "channel_points_votes",
        "type": "integer",
        "description": "Number of votes received via Channel Points."
      },
      {
        "name": "votes",
        "type": "integer",
        "description": "Total number of votes received for the choice across all methods of voting."
      }
    ],
    "class_name": "TChoices",
    "doclink": "#choices"
  },
  {
    "name": "Automod Message Hold Condition",
    "id": "automod-message-hold-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the broadcaster (channel).",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "User ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TAutomodMessageHoldCondition",
    "doclink": "#automod-message-hold-condition"
  },
  {
    "name": "Automod Message Update Condition",
    "id": "automod-message-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the broadcaster (channel). Maximum:1.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "User ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TAutomodMessageUpdateCondition",
    "doclink": "#automod-message-update-condition"
  },
  {
    "name": "Automod Settings Update Condition",
    "id": "automod-settings-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the broadcaster (channel). Maximum:1.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "User ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TAutomodSettingsUpdateCondition",
    "doclink": "#automod-settings-update-condition"
  },
  {
    "name": "Automod Terms Update Condition",
    "id": "automod-terms-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the broadcaster (channel). Maximum:1.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "User ID of the moderator creating the subscription. Maximum:1",
        "required": "yes"
      }
    ],
    "class_name": "TAutomodTermsUpdateCondition",
    "doclink": "#automod-terms-update-condition"
  },
  {
    "name": "Channel Ad Break Begin Condition",
    "id": "channel-ad-break-begin-condition",
    "params": [
      {
        "name": "broadcaster_id",
        "type": "string",
        "description": "The ID of the broadcaster that you want to get Channel Ad Break begin notifications for. Maximum: 1",
        "required": "yes"
      }
    ],
    "class_name": "TChannelAdBreakBeginCondition",
    "doclink": "#channel-ad-break-begin-condition"
  },
  {
    "name": "Channel Ban Condition",
    "id": "channel-ban-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get ban notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelBanCondition",
    "doclink": "#channel-ban-condition"
  },
  {
    "name": "Channel Chat Clear Condition",
    "id": "channel-chat-clear-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat clear events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatClearCondition",
    "doclink": "#channel-chat-clear-condition"
  },
  {
    "name": "Channel Chat Clear User Messages Condition",
    "id": "channel-chat-clear-user-messages-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat clear user messages events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatClearUserMessagesCondition",
    "doclink": "#channel-chat-clear-user-messages-condition"
  },
  {
    "name": "Channel Chat Message Condition",
    "id": "channel-chat-message-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel to receive chat message events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The User ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatMessageCondition",
    "doclink": "#channel-chat-message-condition"
  },
  {
    "name": "Channel Chat Message Delete Condition",
    "id": "channel-chat-message-delete-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat message delete events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatMessageDeleteCondition",
    "doclink": "#channel-chat-message-delete-condition"
  },
  {
    "name": "Channel Chat Notification Condition",
    "id": "channel-chat-notification-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat notification events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatNotificationCondition",
    "doclink": "#channel-chat-notification-condition"
  },
  {
    "name": "Channel Chat Settings Update Condition",
    "id": "channel-chat-settings-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat settings update events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatSettingsUpdateCondition",
    "doclink": "#channel-chat-settings-update-condition"
  },
  {
    "name": "Channel Chat User Message Hold Condition",
    "id": "channel-chat-user-message-hold-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat message events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatUserMessageHoldCondition",
    "doclink": "#channel-chat-user-message-hold-condition"
  },
  {
    "name": "Channel Chat User Message Update Condition",
    "id": "channel-chat-user-message-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat message events for.",
        "required": "yes"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID to read chat as.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelChatUserMessageUpdateCondition",
    "doclink": "#channel-chat-user-message-update-condition"
  },
  {
    "name": "Channel Subscribe Condition",
    "id": "channel-subscribe-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get subscribe notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSubscribeCondition",
    "doclink": "#channel-subscribe-condition"
  },
  {
    "name": "Channel Subscription End Condition",
    "id": "channel-subscription-end-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get subscription end notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSubscriptionEndCondition",
    "doclink": "#channel-subscription-end-condition"
  },
  {
    "name": "Channel Subscription Gift Condition",
    "id": "channel-subscription-gift-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get subscription gift notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSubscriptionGiftCondition",
    "doclink": "#channel-subscription-gift-condition"
  },
  {
    "name": "Channel Subscription Message Condition",
    "id": "channel-subscription-message-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get resubscription chat message notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSubscriptionMessageCondition",
    "doclink": "#channel-subscription-message-condition"
  },
  {
    "name": "Channel Cheer Condition",
    "id": "channel-cheer-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get cheer notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelCheerCondition",
    "doclink": "#channel-cheer-condition"
  },
  {
    "name": "Channel Update Condition",
    "id": "channel-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get updates for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelUpdateCondition",
    "doclink": "#channel-update-condition"
  },
  {
    "name": "Channel Follow Condition",
    "id": "channel-follow-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get follow notifications for.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator of the channel you want to get follow notifications for. If you have authorization from the broadcaster rather than a moderator, specify the broadcaster\u2019s user ID here.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelFollowCondition",
    "doclink": "#channel-follow-condition"
  },
  {
    "name": "Channel Unban Condition",
    "id": "channel-unban-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get unban notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelUnbanCondition",
    "doclink": "#channel-unban-condition"
  },
  {
    "name": "Channel Unban Request Create Condition",
    "id": "channel-unban-request-create-condition",
    "params": [
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the user that has permission to moderate the broadcaster\u2019s channel and has granted your app permission to subscribe to this subscription type.",
        "required": "yes"
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster you want to get chat unban request notifications for. Maximum: 1.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelUnbanRequestCreateCondition",
    "doclink": "#channel-unban-request-create-condition"
  },
  {
    "name": "Channel Unban Request Resolve Condition",
    "id": "channel-unban-request-resolve-condition",
    "params": [
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the user that has permission to moderate the broadcaster\u2019s channel and has granted your app permission to subscribe to this subscription type.",
        "required": "yes"
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster you want to get unban request resolution notifications for. Maximum: 1.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelUnbanRequestResolveCondition",
    "doclink": "#channel-unban-request-resolve-condition"
  },
  {
    "name": "Channel Raid Condition",
    "id": "channel-raid-condition",
    "params": [
      {
        "name": "from_broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID that created the channel raid you want to get notifications for. Use this parameter if you want to know when a specific broadcaster raids another broadcaster. The channel raid condition must include either  from_broadcaster_user_id  or  to_broadcaster_user_id .",
        "required": "no"
      },
      {
        "name": "to_broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID that received the channel raid you want to get notifications for. Use this parameter if you want to know when a specific broadcaster is raided by another broadcaster. The channel raid condition must include either  from_broadcaster_user_id  or  to_broadcaster_user_id .",
        "required": "no"
      }
    ],
    "class_name": "TChannelRaidCondition",
    "doclink": "#channel-raid-condition"
  },
  {
    "name": "Channel Moderate Condition",
    "id": "channel-moderate-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The user ID of the broadcaster.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelModerateCondition",
    "doclink": "#channel-moderate-condition"
  },
  {
    "name": "Channel Moderate V2 Condition",
    "id": "channel-moderate-v2-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The user ID of the broadcaster.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelModerateV2Condition",
    "doclink": "#channel-moderate-v2-condition"
  },
  {
    "name": "Channel Moderator Add Condition",
    "id": "channel-moderator-add-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get moderator addition notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelModeratorAddCondition",
    "doclink": "#channel-moderator-add-condition"
  },
  {
    "name": "Channel Moderator Remove Condition",
    "id": "channel-moderator-remove-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to get moderator removal notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelModeratorRemoveCondition",
    "doclink": "#channel-moderator-remove-condition"
  },
  {
    "name": "Channel Guest Star Session Begin Condition",
    "id": "channel-guest-star-session-begin-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel hosting the Guest Star Session",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator or broadcaster of the specified channel.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelGuestStarSessionBeginCondition",
    "doclink": "#channel-guest-star-session-begin-condition"
  },
  {
    "name": "Channel Guest Star Session End Condition",
    "id": "channel-guest-star-session-end-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel hosting the Guest Star Session",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator or broadcaster of the specified channel.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelGuestStarSessionEndCondition",
    "doclink": "#channel-guest-star-session-end-condition"
  },
  {
    "name": "Channel Guest Star Guest Update Condition",
    "id": "channel-guest-star-guest-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel hosting the Guest Star Session",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator or broadcaster of the specified channel.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelGuestStarGuestUpdateCondition",
    "doclink": "#channel-guest-star-guest-update-condition"
  },
  {
    "name": "Channel Guest Star Settings Update Condition",
    "id": "channel-guest-star-settings-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel hosting the Guest Star Session",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator or broadcaster of the specified channel.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelGuestStarSettingsUpdateCondition",
    "doclink": "#channel-guest-star-settings-update-condition"
  },
  {
    "name": "Channel Points Automatic Reward Redemption Add Condition",
    "id": "channel-points-automatic-reward-redemption-add-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to receive channel points reward add notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPointsAutomaticRewardRedemptionAddCondition",
    "doclink": "#channel-points-automatic-reward-redemption-add-condition"
  },
  {
    "name": "Channel Points Custom Reward Add Condition",
    "id": "channel-points-custom-reward-add-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to receive channel points custom reward add notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPointsCustomRewardAddCondition",
    "doclink": "#channel-points-custom-reward-add-condition"
  },
  {
    "name": "Channel Points Custom Reward Update Condition",
    "id": "channel-points-custom-reward-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to receive channel points custom reward update notifications for.",
        "required": "yes"
      },
      {
        "name": "reward_id",
        "type": "string",
        "description": "Optional . Specify a reward id to only receive notifications for a specific reward.",
        "required": "no"
      }
    ],
    "class_name": "TChannelPointsCustomRewardUpdateCondition",
    "doclink": "#channel-points-custom-reward-update-condition"
  },
  {
    "name": "Channel Points Custom Reward Remove Condition",
    "id": "channel-points-custom-reward-remove-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to receive channel points custom reward remove notifications for.",
        "required": "yes"
      },
      {
        "name": "reward_id",
        "type": "string",
        "description": "Optional . Specify a reward id to only receive notifications for a specific reward.",
        "required": "no"
      }
    ],
    "class_name": "TChannelPointsCustomRewardRemoveCondition",
    "doclink": "#channel-points-custom-reward-remove-condition"
  },
  {
    "name": "Channel Points Custom Reward Redemption Add Condition",
    "id": "channel-points-custom-reward-redemption-add-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to receive channel points custom reward redemption add notifications for.",
        "required": "yes"
      },
      {
        "name": "reward_id",
        "type": "string",
        "description": "Optional . Specify a reward id to only receive notifications for a specific reward.",
        "required": "no"
      }
    ],
    "class_name": "TChannelPointsCustomRewardRedemptionAddCondition",
    "doclink": "#channel-points-custom-reward-redemption-add-condition"
  },
  {
    "name": "Channel Points Custom Reward Redemption Update Condition",
    "id": "channel-points-custom-reward-redemption-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID for the channel you want to receive channel points custom reward redemption update notifications for.",
        "required": "yes"
      },
      {
        "name": "reward_id",
        "type": "string",
        "description": "Optional . Specify a reward id to only receive notifications for a specific reward.",
        "required": "no"
      }
    ],
    "class_name": "TChannelPointsCustomRewardRedemptionUpdateCondition",
    "doclink": "#channel-points-custom-reward-redemption-update-condition"
  },
  {
    "name": "Channel Poll Begin Condition",
    "id": "channel-poll-begin-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cpoll begin\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPollBeginCondition",
    "doclink": "#channel-poll-begin-condition"
  },
  {
    "name": "Channel Poll Progress Condition",
    "id": "channel-poll-progress-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cpoll progress\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPollProgressCondition",
    "doclink": "#channel-poll-progress-condition"
  },
  {
    "name": "Channel Poll End Condition",
    "id": "channel-poll-end-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cpoll end\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPollEndCondition",
    "doclink": "#channel-poll-end-condition"
  },
  {
    "name": "Channel Prediction Begin Condition",
    "id": "channel-prediction-begin-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cprediction begin\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPredictionBeginCondition",
    "doclink": "#channel-prediction-begin-condition"
  },
  {
    "name": "Channel Prediction Progress Condition",
    "id": "channel-prediction-progress-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cprediction progress\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPredictionProgressCondition",
    "doclink": "#channel-prediction-progress-condition"
  },
  {
    "name": "Channel Prediction Lock Condition",
    "id": "channel-prediction-lock-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cprediction lock\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPredictionLockCondition",
    "doclink": "#channel-prediction-lock-condition"
  },
  {
    "name": "Channel Prediction End Condition",
    "id": "channel-prediction-end-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID of the channel for which \u201cprediction end\u201d notifications will be received.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelPredictionEndCondition",
    "doclink": "#channel-prediction-end-condition"
  },
  {
    "name": "Channel Shared Chat Session Begin Condition",
    "id": "channel-shared-chat-session-begin-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel to receive shared chat session begin events for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSharedChatSessionBeginCondition",
    "doclink": "#channel-shared-chat-session-begin-condition"
  },
  {
    "name": "Channel Shared Chat Session Update Condition",
    "id": "channel-shared-chat-session-update-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel to receive shared chat session update events for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSharedChatSessionUpdateCondition",
    "doclink": "#channel-shared-chat-session-update-condition"
  },
  {
    "name": "Channel Shared Chat Session End Condition",
    "id": "channel-shared-chat-session-end-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel to receive shared chat session end events for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSharedChatSessionEndCondition",
    "doclink": "#channel-shared-chat-session-end-condition"
  },
  {
    "name": "Channel Suspicious User Message Condition",
    "id": "channel-suspicious-user-message-condition",
    "params": [
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of a user that has permission to moderate the broadcaster\u2019s channel and has granted your app permission to subscribe to this subscription type.",
        "required": "yes"
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the channel to receive chat message events for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSuspiciousUserMessageCondition",
    "doclink": "#channel-suspicious-user-message-condition"
  },
  {
    "name": "Channel Suspicious User Update Condition",
    "id": "channel-suspicious-user-update-condition",
    "params": [
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of a user that has permission to moderate the broadcaster\u2019s channel and has granted your app permission to subscribe to this subscription type.",
        "required": "yes"
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster you want to get chat unban request notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelSuspiciousUserUpdateCondition",
    "doclink": "#channel-suspicious-user-update-condition"
  },
  {
    "name": "Channel VIP Add Condition",
    "id": "channel-vip-add-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the broadcaster (channel) Maximum: 1",
        "required": "yes"
      }
    ],
    "class_name": "TChannelVipAddCondition",
    "doclink": "#channel-vip-add-condition"
  },
  {
    "name": "Channel VIP Remove Condition",
    "id": "channel-vip-remove-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the broadcaster (channel) Maximum: 1",
        "required": "yes"
      }
    ],
    "class_name": "TChannelVipRemoveCondition",
    "doclink": "#channel-vip-remove-condition"
  },
  {
    "name": "Channel Warning Acknowledge Condition",
    "id": "channel-warning-acknowledge-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the broadcaster.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The User ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelWarningAcknowledgeCondition",
    "doclink": "#channel-warning-acknowledge-condition"
  },
  {
    "name": "Channel Warning Send Condition",
    "id": "channel-warning-send-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the broadcaster.",
        "required": "yes"
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The User ID of the moderator.",
        "required": "yes"
      }
    ],
    "class_name": "TChannelWarningSendCondition",
    "doclink": "#channel-warning-send-condition"
  },
  {
    "name": "Conduit Shard Disabled Condition",
    "id": "conduit-shard-disabled-condition",
    "params": [
      {
        "name": "client_id",
        "type": "string",
        "description": "Your application\u2019s client id. The provided client_id must match the client ID in the application access token.",
        "required": "yes"
      },
      {
        "name": "conduit_id",
        "type": "string",
        "description": "The conduit ID to receive events for. If omitted, events for all of this client\u2019s conduits are sent.",
        "required": "no"
      }
    ],
    "class_name": "TConduitShardDisabledCondition",
    "doclink": "#conduit-shard-disabled-condition"
  },
  {
    "name": "Drop Entitlement Grant Condition",
    "id": "drop-entitlement-grant-condition",
    "params": [
      {
        "name": "organization_id",
        "type": "string",
        "description": "The organization ID of the organization that owns the game on the developer portal.",
        "required": "yes"
      },
      {
        "name": "category_id",
        "type": "string",
        "description": "The category (or game) ID of the game for which entitlement notifications will be received.",
        "required": "no"
      },
      {
        "name": "campaign_id",
        "type": "string",
        "description": "The campaign ID for a specific campaign for which entitlement notifications will be received.",
        "required": "no"
      }
    ],
    "class_name": "TDropEntitlementGrantCondition",
    "doclink": "#drop-entitlement-grant-condition"
  },
  {
    "name": "Extension Bits Transaction Create Condition",
    "id": "extension-bits-transaction-create-condition",
    "params": [
      {
        "name": "extension_client_id",
        "type": "string",
        "description": "The client ID of the extension.",
        "required": "yes"
      }
    ],
    "class_name": "TExtensionBitsTransactionCreateCondition",
    "doclink": "#extension-bits-transaction-create-condition"
  },
  {
    "name": "Goals Condition",
    "id": "goals-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster to get notified about. The ID must match the  user_id  in the OAuth access token.",
        "required": "yes"
      }
    ],
    "class_name": "TGoalsCondition",
    "doclink": "#goals-condition"
  },
  {
    "name": "Hype Train Begin Condition",
    "id": "hype-train-begin-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster that you want to get Hype Train begin notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "THypeTrainBeginCondition",
    "doclink": "#hype-train-begin-condition"
  },
  {
    "name": "Hype Train Progress Condition",
    "id": "hype-train-progress-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster that you want to get Hype Train progress notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "THypeTrainProgressCondition",
    "doclink": "#hype-train-progress-condition"
  },
  {
    "name": "Hype Train End Condition",
    "id": "hype-train-end-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster that you want to get Hype Train end notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "THypeTrainEndCondition",
    "doclink": "#hype-train-end-condition"
  },
  {
    "name": "Stream Online Condition",
    "id": "stream-online-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID you want to get stream online notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TStreamOnlineCondition",
    "doclink": "#stream-online-condition"
  },
  {
    "name": "Stream Offline Condition",
    "id": "stream-offline-condition",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID you want to get stream offline notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TStreamOfflineCondition",
    "doclink": "#stream-offline-condition"
  },
  {
    "name": "User Authorization Grant Condition",
    "id": "user-authorization-grant-condition",
    "params": [
      {
        "name": "client_id",
        "type": "string",
        "description": "Your application\u2019s client id. The provided\u00a0 client_id \u00a0must match the client id in the application access token.",
        "required": "yes"
      }
    ],
    "class_name": "TUserAuthorizationGrantCondition",
    "doclink": "#user-authorization-grant-condition"
  },
  {
    "name": "User Authorization Revoke Condition",
    "id": "user-authorization-revoke-condition",
    "params": [
      {
        "name": "client_id",
        "type": "string",
        "description": "Your application\u2019s client id. The provided\u00a0 client_id \u00a0must match the client id in the application access token.",
        "required": "yes"
      }
    ],
    "class_name": "TUserAuthorizationRevokeCondition",
    "doclink": "#user-authorization-revoke-condition"
  },
  {
    "name": "User Update Condition",
    "id": "user-update-condition",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID for the user you want update notifications for.",
        "required": "yes"
      }
    ],
    "class_name": "TUserUpdateCondition",
    "doclink": "#user-update-condition"
  },
  {
    "name": "Whisper Received Condition",
    "id": "whisper-received-condition",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user_id of the person receiving whispers.",
        "required": "yes"
      }
    ],
    "class_name": "TWhisperReceivedCondition",
    "doclink": "#whisper-received-condition"
  },
  {
    "name": "Emotes",
    "id": "emotes",
    "params": [
      {
        "name": "begin",
        "type": "int",
        "description": "The index of where the Emote starts in the text."
      },
      {
        "name": "end",
        "type": "int",
        "description": "The index of where the Emote ends in the text."
      },
      {
        "name": "id",
        "type": "string",
        "description": "The emote ID."
      }
    ],
    "class_name": "TEmotes",
    "doclink": "#emotes"
  },
  {
    "name": "Automod Message Hold Event",
    "id": "automod-message-hold-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The message sender\u2019s user ID."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The message sender\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The message sender\u2019s display name."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message that was flagged by automod."
      },
      {
        "name": "message",
        "type": "object[]",
        "description": "The body of the message.",
        "class_name": "TAutomodMessageHoldEventMessage"
      },
      {
        "name": "category",
        "type": "string",
        "description": "The category of the message."
      },
      {
        "name": "level",
        "type": "int",
        "description": "The level of severity. Measured between 1 to 4."
      },
      {
        "name": "held_at",
        "type": "string",
        "description": "The timestamp of when automod saved the message."
      }
    ],
    "class_name": "TAutomodMessageHoldEvent",
    "doclink": "#automod-message-hold-event"
  },
  {
    "name": "Automod Message Hold Event V2",
    "id": "automod-message-hold-event-v2",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The message sender\u2019s user ID."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The message sender\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The message sender\u2019s display name."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the held message."
      },
      {
        "name": "message",
        "type": "object[]",
        "description": "The body of the message.",
        "class_name": "TAutomodMessageHoldEventV2Message"
      },
      {
        "name": "held_at",
        "type": "string",
        "description": "The timestamp of when automod saved the message."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Possible values are:  automod blocked_term"
      },
      {
        "name": "automod",
        "type": "object",
        "description": "Optional. If the message was caught by automod, this will be populated.",
        "class_name": "TAutomodMessageHoldEventV2Automod"
      },
      {
        "name": "blocked_term",
        "type": "object",
        "description": "Optional. If the message was caught due to a blocked term, this will be populated.",
        "class_name": "TAutomodMessageHoldEventV2BlockedTerm"
      }
    ],
    "class_name": "TAutomodMessageHoldEventV2",
    "doclink": "#automod-message-hold-event-v2"
  },
  {
    "name": "Automod Message Update Event",
    "id": "automod-message-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The message sender\u2019s user ID."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The message sender\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The message sender\u2019s display name."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "TThe moderator\u2019s user name."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The login of the moderator."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message that was flagged by automod."
      },
      {
        "name": "message",
        "type": "object[]",
        "description": "The body of the message.",
        "class_name": "TAutomodMessageUpdateEventMessage"
      },
      {
        "name": "category",
        "type": "string",
        "description": "The category of the message."
      },
      {
        "name": "level",
        "type": "int",
        "description": "The level of severity. Measured between 1 to 4."
      },
      {
        "name": "status",
        "type": "string",
        "description": "The message\u2019s status. Possible values are: Approved Denied Expired"
      },
      {
        "name": "held_at",
        "type": "string",
        "description": "The timestamp of when automod saved the message."
      }
    ],
    "class_name": "TAutomodMessageUpdateEvent",
    "doclink": "#automod-message-update-event"
  },
  {
    "name": "Automod Message Update Event V2",
    "id": "automod-message-update-event-v2",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The message sender\u2019s user ID."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The message sender\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The message sender\u2019s display name."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "TThe moderator\u2019s user name."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The login of the moderator."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message that was flagged by automod."
      },
      {
        "name": "message",
        "type": "object[]",
        "description": "The body of the message.",
        "class_name": "TAutomodMessageUpdateEventV2Message"
      },
      {
        "name": "status",
        "type": "string",
        "description": "The message\u2019s status. Possible values are: Approved Denied Expired"
      },
      {
        "name": "held_at",
        "type": "string",
        "description": "The timestamp of when automod saved the message."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "The reason why the message was caught. Possible values are:  automod blocked_term"
      },
      {
        "name": "automod",
        "type": "object",
        "description": "Optional. If the message was caught by automod, this will be populated.",
        "class_name": "TAutomodMessageUpdateEventV2Automod"
      },
      {
        "name": "blocked_term",
        "type": "object",
        "description": "Optional. If the message was caught due to a blocked term, this will be populated.",
        "class_name": "TAutomodMessageUpdateEventV2BlockedTerm"
      }
    ],
    "class_name": "TAutomodMessageUpdateEventV2",
    "doclink": "#automod-message-update-event-v2"
  },
  {
    "name": "Automod Settings Update Event",
    "id": "automod-settings-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator who changed the channel settings."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The moderator\u2019s login."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The moderator\u2019s user name."
      },
      {
        "name": "bullying",
        "type": "int",
        "description": "The Automod level for hostility involving name calling or insults."
      },
      {
        "name": "overall_level",
        "type": "int (or null)",
        "description": "The default AutoMod level for the broadcaster. This field is null if the broadcaster has set one or more of the individual settings."
      },
      {
        "name": "disability",
        "type": "int",
        "description": "The Automod level for discrimination against disability."
      },
      {
        "name": "race_ethnicity_or_religion",
        "type": "int",
        "description": "The Automod level for racial discrimination."
      },
      {
        "name": "misogyny",
        "type": "int",
        "description": "The Automod level for discrimination against women."
      },
      {
        "name": "sexuality_sex_or_gender",
        "type": "int",
        "description": "The AutoMod level for discrimination based on sexuality, sex, or gender."
      },
      {
        "name": "aggression",
        "type": "int",
        "description": "The Automod level for hostility involving aggression."
      },
      {
        "name": "sex_based_terms",
        "type": "int",
        "description": "The Automod level for sexual content."
      },
      {
        "name": "swearing",
        "type": "int",
        "description": "The Automod level for profanity."
      }
    ],
    "class_name": "TAutomodSettingsUpdateEvent",
    "doclink": "#automod-settings-update-event"
  },
  {
    "name": "Automod Terms Update Event",
    "id": "automod-terms-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator who changed the channel settings."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The moderator\u2019s login."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The moderator\u2019s user name."
      },
      {
        "name": "action",
        "type": "string",
        "description": "The status change applied to the terms. Possible options are:  add_permitted remove_permitted add_blocked remove_blocked"
      },
      {
        "name": "from_automod",
        "type": "bool",
        "description": "Indicates whether this term was added due to an Automod message approve/deny action."
      },
      {
        "name": "terms",
        "type": "string[]",
        "description": "The list of terms that had a status change."
      }
    ],
    "class_name": "TAutomodTermsUpdateEvent",
    "doclink": "#automod-terms-update-event"
  },
  {
    "name": "Channel Ad Break Begin Event",
    "id": "channel-ad-break-begin-event",
    "params": [
      {
        "name": "duration_seconds",
        "type": "integer",
        "description": "Length in seconds of the mid-roll ad break requested"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The UTC timestamp of when the ad break began, in RFC3339 format. Note that there is potential delay between this event, when the streamer requested the ad break, and when the viewers will see ads."
      },
      {
        "name": "is_automatic",
        "type": "boolean",
        "description": "Indicates if the ad was automatically scheduled via Ads Manager"
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster\u2019s user ID for the channel the ad was run on."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s user login for the channel the ad was run on."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s user display name for the channel the ad was run on."
      },
      {
        "name": "requester_user_id",
        "type": "string",
        "description": "The ID of the user that requested the ad. For automatic ads, this will be the ID of the broadcaster."
      },
      {
        "name": "requester_user_login",
        "type": "string",
        "description": "The login of the user that requested the ad."
      },
      {
        "name": "requester_user_name",
        "type": "string",
        "description": "The display name of the user that requested the ad."
      }
    ],
    "class_name": "TChannelAdBreakBeginEvent",
    "doclink": "#channel-ad-break-begin-event"
  },
  {
    "name": "Channel Ban Event",
    "id": "channel-ban-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID for the user who was banned on the specified channel."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user who was banned on the specified channel."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user who was banned on the specified channel."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the issuer of the ban."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The user login of the issuer of the ban."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The user name of the issuer of the ban."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "The reason behind the ban."
      },
      {
        "name": "banned_at",
        "type": "string",
        "description": "The UTC date and time (in RFC3339 format) of when the user was banned or put in a timeout."
      },
      {
        "name": "ends_at",
        "type": "string",
        "description": "The UTC date and time (in RFC3339 format) of when the timeout ends. Is  null  if the user was banned instead of put in a timeout."
      },
      {
        "name": "is_permanent",
        "type": "boolean",
        "description": "Indicates whether the ban is permanent (true) or a timeout (false). If true,  ends_at  will be null."
      }
    ],
    "class_name": "TChannelBanEvent",
    "doclink": "#channel-ban-event"
  },
  {
    "name": "Channel Chat Clear Event",
    "id": "channel-chat-clear-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      }
    ],
    "class_name": "TChannelChatClearEvent",
    "doclink": "#channel-chat-clear-event"
  },
  {
    "name": "Channel Chat Clear User Messages Event",
    "id": "channel-chat-clear-user-messages-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "target_user_id",
        "type": "string",
        "description": "The ID of the user that was banned or put in a timeout. All of their messages are deleted."
      },
      {
        "name": "target_user_name",
        "type": "string",
        "description": "The user name of the user that was banned or put in a timeout."
      },
      {
        "name": "target_user_login",
        "type": "string",
        "description": "The user login of the user that was banned or put in a timeout."
      }
    ],
    "class_name": "TChannelChatClearUserMessagesEvent",
    "doclink": "#channel-chat-clear-user-messages-event"
  },
  {
    "name": "Channel Chat Message Event",
    "id": "channel-chat-message-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "chatter_user_id",
        "type": "string",
        "description": "The user ID of the user that sent the message."
      },
      {
        "name": "chatter_user_name",
        "type": "string",
        "description": "The user name of the user that sent the message."
      },
      {
        "name": "chatter_user_login",
        "type": "string",
        "description": "The user login of the user that sent the message."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "A UUID that identifies the message."
      },
      {
        "name": "message",
        "type": "object",
        "description": "The structured chat message.",
        "class_name": "TChannelChatMessageEventMessage"
      },
      {
        "name": "message_type",
        "type": "string",
        "description": "The type of message. Possible values: <ul><li>text</li><li>channel_points_highlighted</li><li>channel_points_sub_only</li><li>user_intro</li><li>power_ups_message_effect</li><li>power_ups_gigantified_emote</li></ul>"
      },
      {
        "name": "badges",
        "type": "object[]",
        "description": "List of chat badges.",
        "class_name": "TChannelChatMessageEventBadges"
      },
      {
        "name": "cheer",
        "type": "object",
        "description": "Optional . Metadata if this message is a cheer.",
        "class_name": "TChannelChatMessageEventCheer"
      },
      {
        "name": "color",
        "type": "string",
        "description": "The color of the user\u2019s name in the chat room. This is a hexadecimal RGB color code in the form,  #&lt;RGB&gt; . This tag may be empty if it is never set."
      },
      {
        "name": "reply",
        "type": "object",
        "description": "Optional . Metadata if this message is a reply.",
        "class_name": "TChannelChatMessageEventReply"
      },
      {
        "name": "channel_points_custom_reward_id",
        "type": "string",
        "description": "Optional . The ID of a channel points custom reward that was redeemed."
      },
      {
        "name": "source_broadcaster_user_id",
        "type": "string",
        "description": "Optional . The broadcaster user ID of the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_broadcaster_user_name",
        "type": "string",
        "description": "Optional . The user name of the broadcaster of the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_broadcaster_user_login",
        "type": "string",
        "description": "Optional . The login of the broadcaster of the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_message_id",
        "type": "string",
        "description": "Optional . The UUID that identifies the source message from the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_badges",
        "type": "object",
        "description": "Optional . The list of chat badges for the chatter in the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.",
        "class_name": "TChannelChatMessageEventSourceBadges"
      }
    ],
    "class_name": "TChannelChatMessageEvent",
    "doclink": "#channel-chat-message-event"
  },
  {
    "name": "Channel Chat Message Delete Event",
    "id": "channel-chat-message-delete-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "target_user_id",
        "type": "string",
        "description": "The ID of the user whose message was deleted."
      },
      {
        "name": "target_user_name",
        "type": "string",
        "description": "The user name of the user whose message was deleted."
      },
      {
        "name": "target_user_login",
        "type": "string",
        "description": "The user login of the user whose message was deleted."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "A UUID that identifies the message that was removed."
      }
    ],
    "class_name": "TChannelChatMessageDeleteEvent",
    "doclink": "#channel-chat-message-delete-event"
  },
  {
    "name": "Channel Chat Notification Event",
    "id": "channel-chat-notification-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "chatter_user_id",
        "type": "string",
        "description": "The user ID of the user that sent the message."
      },
      {
        "name": "chatter_user_name",
        "type": "string",
        "description": "The user login of the user that sent the message."
      },
      {
        "name": "chatter_is_anonymous",
        "type": "bool",
        "description": "Whether or not the chatter is anonymous."
      },
      {
        "name": "color",
        "type": "string",
        "description": "The color of the user\u2019s name in the chat room."
      },
      {
        "name": "badges",
        "type": "object[]",
        "description": "The color of the user\u2019s name in the chat room.",
        "class_name": "TChannelChatNotificationEventBadges"
      },
      {
        "name": "system_message",
        "type": "string",
        "description": "The message Twitch shows in the chat room for this notice."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "A UUID that identifies the message."
      },
      {
        "name": "message",
        "type": "object",
        "description": "The structured chat message.",
        "class_name": "TChannelChatNotificationEventMessage"
      },
      {
        "name": "notice_type",
        "type": "string",
        "description": "The type of notice. Possible values are:  sub resub sub_gift community_sub_gift gift_paid_upgrade prime_paid_upgrade raid unraid pay_it_forward announcement bits_badge_tier charity_donation shared_chat_sub shared_chat_resub shared_chat_sub_gift shared_chat_community_sub_gift shared_chat_gift_paid_upgrade shared_chat_prime_paid_upgrade shared_chat_raid shared_chat_pay_it_forward shared_chat_announcement"
      },
      {
        "name": "sub",
        "type": "object",
        "description": "Information about the sub event. Null if  notice_type  is not  sub .",
        "class_name": "TChannelChatNotificationEventSub"
      },
      {
        "name": "resub",
        "type": "object",
        "description": "Information about the resub event. Null if  notice_type  is not  resub .",
        "class_name": "TChannelChatNotificationEventResub"
      },
      {
        "name": "sub_gift",
        "type": "object",
        "description": "Information about the gift sub event. Null if notice_type is not sub_gift.",
        "class_name": "TChannelChatNotificationEventSubGift"
      },
      {
        "name": "community_sub_gift",
        "type": "object",
        "description": "Information about the community gift sub event. Null if  notice_type  is not  community_sub_gift .",
        "class_name": "TChannelChatNotificationEventCommunitySubGift"
      },
      {
        "name": "gift_paid_upgrade",
        "type": "object",
        "description": "Information about the community gift paid upgrade event. Null if  notice_type  is not  gift_paid_upgrade .",
        "class_name": "TChannelChatNotificationEventGiftPaidUpgrade"
      },
      {
        "name": "prime_paid_upgrade",
        "type": "object",
        "description": "Information about the Prime gift paid upgrade event. Null if  notice_type  is not  prime_paid_upgrade",
        "class_name": "TChannelChatNotificationEventPrimePaidUpgrade"
      },
      {
        "name": "pay_it_forward",
        "type": "object",
        "description": "Information about the pay it forward event. Null if  notice_type  is not  pay_it_forward",
        "class_name": "TChannelChatNotificationEventPayItForward"
      },
      {
        "name": "raid",
        "type": "object",
        "description": "Information about the raid event. Null if  notice_type  is not  raid",
        "class_name": "TChannelChatNotificationEventRaid"
      },
      {
        "name": "unraid",
        "type": "object",
        "description": "Returns an empty payload if   notice_type  is not  unraid , otherwise returns null."
      },
      {
        "name": "announcement",
        "type": "object",
        "description": "Information about the announcement event. Null if  notice_type  is not {::nomarkdown} announcement",
        "class_name": "TChannelChatNotificationEventAnnouncement"
      },
      {
        "name": "bits_badge_tier",
        "type": "object",
        "description": "Information about the bits badge tier event. Null if  notice_type  is not  bits_badge_tier",
        "class_name": "TChannelChatNotificationEventBitsBadgeTier"
      },
      {
        "name": "charity_donation",
        "type": "object",
        "description": "Information about the announcement event. Null if  notice_type  is not  charity_donation",
        "class_name": "TChannelChatNotificationEventCharityDonation"
      },
      {
        "name": "source_broadcaster_user_id",
        "type": "string",
        "description": "Optional . The broadcaster user ID of the channel the message was sent from. Is null when the message notification happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_broadcaster_user_name",
        "type": "string",
        "description": "Optional . The user name of the broadcaster of the channel the message was sent from. Is null when the message notification happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_broadcaster_user_login",
        "type": "string",
        "description": "Optional . The login of the broadcaster of the channel the message was sent from. Is null when the message notification happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_message_id",
        "type": "string",
        "description": "Optional . The UUID that identifies the source message from the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "source_badges",
        "type": "object",
        "description": "Optional . The list of chat badges for the chatter in the channel the message was sent from. Is null when the message happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster.",
        "class_name": "TChannelChatNotificationEventSourceBadges"
      },
      {
        "name": "shared_chat_sub",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_sub  event. Is null if  notice_type  is not  shared_chat_sub . This field has the same information as the  sub  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_resub",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_resub  event. Is null if  notice_type  is not  shared_chat_resub . This field has the same information as the  resub  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_sub_gift",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_sub_gift  event. Is null if  notice_type  is not  shared_chat_sub_gift . This field has the same information as the  chat_sub_gift  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_community_sub_gift",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_community_sub_gift  event. Is null if  notice_type  is not  shared_chat_community_sub_gift . This field has the same information as the  community_sub_gift  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_gift_paid_upgrade",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_gift_paid_upgrade  event. Is null if  notice_type  is not  shared_chat_gift_paid_upgrade . This field has the same information as the  gift_paid_upgrade  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_prime_paid_upgrade",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_chat_prime_paid_upgrade  event. Is null if  notice_type  is not  shared_chat_prime_paid_upgrade . This field has the same information as the  prime_paid_upgrade  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_pay_it_forward",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_pay_it_forward  event. Is null if  notice_type  is not  shared_chat_pay_it_forward . This field has the same information as the  pay_it_forward  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_raid",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_raid  event. Is null if  notice_type  is not  shared_chat_raid . This field has the same information as the  raid  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_announcement",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_announcement  event. Is null if  notice_type  is not  shared_chat_announcement . This field has the same information as the  announcement  field but for a notice that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      }
    ],
    "class_name": "TChannelChatNotificationEvent",
    "doclink": "#channel-chat-notification-event"
  },
  {
    "name": "Channel Chat Settings Update Event",
    "id": "channel-chat-settings-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "emote_mode",
        "type": "bool",
        "description": "A Boolean value that determines whether chat messages must contain only emotes. True if only messages that are 100% emotes are allowed; otherwise false."
      },
      {
        "name": "follower_mode",
        "type": "bool",
        "description": "A Boolean value that determines whether the broadcaster restricts the chat room to followers only, based on how long they\u2019ve followed. True if the broadcaster restricts the chat room to followers only; otherwise false. See  follower_mode_duration_minutes  for how long the followers must have followed the broadcaster to participate in the chat room."
      },
      {
        "name": "follower_mode_duration_minutes",
        "type": "int",
        "description": "The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room. See  follower_mode . Null if  follower_mode  is false."
      },
      {
        "name": "slow_mode",
        "type": "bool",
        "description": "A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages. Is true, if the broadcaster applies a delay; otherwise, false. See  slow_mode_wait_time_seconds  for the delay."
      },
      {
        "name": "slow_mode_wait_time_seconds",
        "type": "int",
        "description": "The amount of time, in seconds, that users need to wait between sending messages. See  slow_mode . Null if  slow_mode  is false."
      },
      {
        "name": "subscriber_mode",
        "type": "bool",
        "description": "A Boolean value that determines whether only users that subscribe to the broadcaster\u2019s channel can talk in the chat room. True if the broadcaster restricts the chat room to subscribers only; otherwise false."
      },
      {
        "name": "unique_chat_mode",
        "type": "bool",
        "description": "A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room. True if the broadcaster requires unique messages only; otherwise false."
      }
    ],
    "class_name": "TChannelChatSettingsUpdateEvent",
    "doclink": "#channel-chat-settings-update-event"
  },
  {
    "name": "Channel Chat User Message Hold Event",
    "id": "channel-chat-user-message-hold-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The User ID of the message sender."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The message sender\u2019s login."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The message sender\u2019s display name."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message that was flagged by automod."
      },
      {
        "name": "message",
        "type": "object[]",
        "description": "The body of the message.",
        "class_name": "TChannelChatUserMessageHoldEventMessage"
      }
    ],
    "class_name": "TChannelChatUserMessageHoldEvent",
    "doclink": "#channel-chat-user-message-hold-event"
  },
  {
    "name": "Channel Chat User Message Update Event",
    "id": "channel-chat-user-message-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster specified in the request."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster specified in the request."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The User ID of the message sender."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The message sender\u2019s login."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The message sender\u2019s user name."
      },
      {
        "name": "status",
        "type": "string",
        "description": "The message\u2019s status. Possible values are: approved denied invalid"
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message that was flagged by automod."
      },
      {
        "name": "message",
        "type": "object[]",
        "description": "The body of the message.",
        "class_name": "TChannelChatUserMessageUpdateEventMessage"
      }
    ],
    "class_name": "TChannelChatUserMessageUpdateEvent",
    "doclink": "#channel-chat-user-message-update-event"
  },
  {
    "name": "Channel Subscribe Event",
    "id": "channel-subscribe-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID for the user who subscribed to the specified channel."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user who subscribed to the specified channel."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user who subscribed to the specified channel."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "tier",
        "type": "string",
        "description": "The tier of the subscription. Valid values are  1000 ,  2000 , and  3000 ."
      },
      {
        "name": "is_gift",
        "type": "boolean",
        "description": "Whether the subscription is a gift."
      }
    ],
    "class_name": "TChannelSubscribeEvent",
    "doclink": "#channel-subscribe-event"
  },
  {
    "name": "Channel Cheer Event",
    "id": "channel-cheer-event",
    "params": [
      {
        "name": "is_anonymous",
        "type": "boolean",
        "description": "Whether the user cheered anonymously or not."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID for the user who cheered on the specified channel. This is null if\u00a0 is_anonymous \u00a0is true."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user who cheered on the specified channel. This is null if\u00a0 is_anonymous \u00a0is true."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user who cheered on the specified channel. This is null if\u00a0 is_anonymous \u00a0is true."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "message",
        "type": "string",
        "description": "The message sent with the cheer."
      },
      {
        "name": "bits",
        "type": "integer",
        "description": "The number of bits cheered."
      }
    ],
    "class_name": "TChannelCheerEvent",
    "doclink": "#channel-cheer-event"
  },
  {
    "name": "Channel Update Event",
    "id": "channel-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster\u2019s user ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s user login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s user display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The channel\u2019s stream title."
      },
      {
        "name": "language",
        "type": "string",
        "description": "The channel\u2019s broadcast language."
      },
      {
        "name": "category_id",
        "type": "string",
        "description": "The channel\u2019s category ID."
      },
      {
        "name": "category_name",
        "type": "string",
        "description": "The category name."
      },
      {
        "name": "content_classification_labels",
        "type": "string[]",
        "description": "Array of content classification label IDs currently applied on the Channel. To retrieve a list of all possible IDs, use the  Get Content Classification Labels  API endpoint."
      }
    ],
    "class_name": "TChannelUpdateEvent",
    "doclink": "#channel-update-event"
  },
  {
    "name": "Channel Unban Event",
    "id": "channel-unban-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user id for the user who was unbanned on the specified channel."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user who was unbanned on the specified channel."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user who was unbanned on the specified channel."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the issuer of the unban."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The user login of the issuer of the unban."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The user name of the issuer of the unban."
      }
    ],
    "class_name": "TChannelUnbanEvent",
    "doclink": "#channel-unban-event"
  },
  {
    "name": "Channel Unban Request Create Event",
    "id": "channel-unban-request-create-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The ID of the unban request."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster\u2019s user ID for the channel the unban request was created for."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "User ID of user that is requesting to be unbanned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user\u2019s display name."
      },
      {
        "name": "text",
        "type": "string",
        "description": "Message sent in the unban request."
      },
      {
        "name": "created_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the unban request was created."
      }
    ],
    "class_name": "TChannelUnbanRequestCreateEvent",
    "doclink": "#channel-unban-request-create-event"
  },
  {
    "name": "Channel Unban Request Resolve Event",
    "id": "channel-unban-request-resolve-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The ID of the unban request."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster\u2019s user ID for the channel the unban request was updated for."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "moderator_id",
        "type": "string",
        "description": "Optional. User ID of moderator who approved/denied the request."
      },
      {
        "name": "moderator_login",
        "type": "string",
        "description": "Optional. The moderator\u2019s login name"
      },
      {
        "name": "moderator_name",
        "type": "string",
        "description": "Optional. The moderator\u2019s display name"
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "User ID of user that requested to be unbanned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user\u2019s display name."
      },
      {
        "name": "resolution_text",
        "type": "string",
        "description": "Optional. Resolution text supplied by the mod/broadcaster upon approval/denial of the request."
      },
      {
        "name": "status",
        "type": "string",
        "description": "Dictates whether the unban request was approved or denied. Can be the following:  approved canceled denied"
      }
    ],
    "class_name": "TChannelUnbanRequestResolveEvent",
    "doclink": "#channel-unban-request-resolve-event"
  },
  {
    "name": "Channel Follow Event",
    "id": "channel-follow-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID for the user now following the specified channel."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user now following the specified channel."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user now following the specified channel."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "followed_at",
        "type": "string",
        "description": "RFC3339 timestamp of when the follow occurred."
      }
    ],
    "class_name": "TChannelFollowEvent",
    "doclink": "#channel-follow-event"
  },
  {
    "name": "Channel Raid Event",
    "id": "channel-raid-event",
    "params": [
      {
        "name": "from_broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster ID that created the raid."
      },
      {
        "name": "from_broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login that created the raid."
      },
      {
        "name": "from_broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name that created the raid."
      },
      {
        "name": "to_broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster ID that received the raid."
      },
      {
        "name": "to_broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login that received the raid."
      },
      {
        "name": "to_broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name that received the raid."
      },
      {
        "name": "viewers",
        "type": "integer",
        "description": "The number of viewers in the raid."
      }
    ],
    "class_name": "TChannelRaidEvent",
    "doclink": "#channel-raid-event"
  },
  {
    "name": "Channel Moderate Event",
    "id": "channel-moderate-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster."
      },
      {
        "name": "source_broadcaster_user_id",
        "type": "string",
        "description": "The channel in which the action originally occurred. Is the same as the  broadcaster_user_id  if not in shared chat."
      },
      {
        "name": "source_broadcaster_user_login",
        "type": "string",
        "description": "The channel in which the action originally occurred. Is the same as the  broadcaster_user_login  if not in shared chat."
      },
      {
        "name": "source_broadcaster_user_name",
        "type": "string",
        "description": "The channel in which the action originally occurred. Is null when the moderator action happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator who performed the action."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The login of the moderator."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The user name of the moderator."
      },
      {
        "name": "action",
        "type": "string",
        "description": "The type of action: Possible values are:  ban timeout unban untimeout clear emoteonly emoteonlyoff followers followersoff uniquechat uniquechatoff slow slowoff subscribers subscribersoff unraid delete unvip vip raid add_blocked_term add_permitted_term remove_blocked_term remove_permitted_term mod unmod approve_unban_request deny_unban_request shared_chat_ban shared_chat_timeout shared_chat_untimeout shared_chat_unban shared_chat_delete"
      },
      {
        "name": "followers",
        "type": "object",
        "description": "Optional .. Metadata associated with the followers command.",
        "class_name": "TChannelModerateEventFollowers"
      },
      {
        "name": "slow",
        "type": "object",
        "description": "Optional . Metadata associated with the slow command.",
        "class_name": "TChannelModerateEventSlow"
      },
      {
        "name": "vip",
        "type": "object",
        "description": "Optional . Metadata associated with the vip command.",
        "class_name": "TChannelModerateEventVip"
      },
      {
        "name": "unvip",
        "type": "object",
        "description": "Optional . Metadata associated with the unvip command.",
        "class_name": "TChannelModerateEventUnvip"
      },
      {
        "name": "mod",
        "type": "object",
        "description": "Optional . Metadata associated with the mod command.",
        "class_name": "TChannelModerateEventMod"
      },
      {
        "name": "unmod",
        "type": "object",
        "description": "Optional . Metadata associated with the unmod command.",
        "class_name": "TChannelModerateEventUnmod"
      },
      {
        "name": "ban",
        "type": "object",
        "description": "Optional . Metadata associated with the ban command.",
        "class_name": "TChannelModerateEventBan"
      },
      {
        "name": "unban",
        "type": "object",
        "description": "Optional . Metadata associated with the unban command.",
        "class_name": "TChannelModerateEventUnban"
      },
      {
        "name": "timeout",
        "type": "object",
        "description": "Optional .. Metadata associated with the timeout command.",
        "class_name": "TChannelModerateEventTimeout"
      },
      {
        "name": "untimeout",
        "type": "object",
        "description": "Optional . Metadata associated with the untimeout command.",
        "class_name": "TChannelModerateEventUntimeout"
      },
      {
        "name": "raid",
        "type": "object",
        "description": "Optional .. Metadata associated with the raid command.",
        "class_name": "TChannelModerateEventRaid"
      },
      {
        "name": "unraid",
        "type": "object",
        "description": "Optional . Metadata associated with the unraid command.",
        "class_name": "TChannelModerateEventUnraid"
      },
      {
        "name": "delete",
        "type": "object",
        "description": "Optional . Metadata associated with the delete command.",
        "class_name": "TChannelModerateEventDelete"
      },
      {
        "name": "automod_terms",
        "type": "object",
        "description": "Optional . Metadata associated with the automod terms changes.",
        "class_name": "TChannelModerateEventAutomodTerms"
      },
      {
        "name": "unban_request",
        "type": "object",
        "description": "Optional . Metadata associated with an unban request.",
        "class_name": "TChannelModerateEventUnbanRequest"
      },
      {
        "name": "shared_chat_ban",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_ban  event. Is null if  action  is not  shared_chat_ban . This field has the same information as the  ban  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_unban",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_unban  event. Is null if  action  is not  shared_chat_unban . This field has the same information as the  unban  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_timeout",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_timeout  event. Is null if  action  is not  shared_chat_timeout . This field has the same information as the  timeout  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_untimeout",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_untimeout  event. Is null if  action  is not  shared_chat_untimeout . This field has the same information as the  untimeout  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_delete",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_delete  event. Is null if  action  is not  shared_chat_delete . This field has the same information as the  delete  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      }
    ],
    "class_name": "TChannelModerateEvent",
    "doclink": "#channel-moderate-event"
  },
  {
    "name": "Channel Moderate Event V2",
    "id": "channel-moderate-event-v2",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster."
      },
      {
        "name": "source_broadcaster_user_id",
        "type": "string",
        "description": "The channel in which the action originally occurred. Is the same as the broadcaster_user_id if not in shared chat."
      },
      {
        "name": "source_broadcaster_user_login",
        "type": "string",
        "description": "The channel in which the action originally occurred. Is the same as the broadcaster_user_login if not in shared chat."
      },
      {
        "name": "source_broadcaster_user_name",
        "type": "string",
        "description": "The channel in which the action originally occurred. Is null when the moderator action happens in the same channel as the broadcaster. Is not null when in a shared chat session, and the action happens in the channel of a participant other than the broadcaster."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator who performed the action."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The login of the moderator."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The user name of the moderator."
      },
      {
        "name": "action",
        "type": "string",
        "description": "The action performed. Possible values are:  ban timeout unban untimeout clear emoteonly emoteonlyoff followers followersoff uniquechat uniquechatoff slow slowoff subscribers subscribersoff unraid delete unvip vip raid add_blocked_term add_permitted_term remove_blocked_term remove_permitted_term mod unmod approve_unban_request deny_unban_request warn shared_chat_ban shared_chat_timeout shared_chat_unban shared_chat_untimeout shared_chat_delete"
      },
      {
        "name": "followers",
        "type": "object",
        "description": "Optional . Metadata associated with the followers command.",
        "class_name": "TChannelModerateEventV2Followers"
      },
      {
        "name": "slow",
        "type": "object",
        "description": "Optional . Metadata associated with the slow command.",
        "class_name": "TChannelModerateEventV2Slow"
      },
      {
        "name": "vip",
        "type": "object",
        "description": "Optional . Metadata associated with the vip command.",
        "class_name": "TChannelModerateEventV2Vip"
      },
      {
        "name": "unvip",
        "type": "object",
        "description": "Optional . Metadata associated with the unvip command.",
        "class_name": "TChannelModerateEventV2Unvip"
      },
      {
        "name": "mod",
        "type": "object",
        "description": "Optional . Metadata associated with the mod command.",
        "class_name": "TChannelModerateEventV2Mod"
      },
      {
        "name": "unmod",
        "type": "object",
        "description": "Optional . Metadata associated with the unmod command.",
        "class_name": "TChannelModerateEventV2Unmod"
      },
      {
        "name": "ban",
        "type": "object",
        "description": "Optional . Metadata associated with the ban command.",
        "class_name": "TChannelModerateEventV2Ban"
      },
      {
        "name": "unban",
        "type": "object",
        "description": "Optional . Metadata associated with the unban command.",
        "class_name": "TChannelModerateEventV2Unban"
      },
      {
        "name": "timeout",
        "type": "object",
        "description": "Optional . Metadata associated with the timeout command.",
        "class_name": "TChannelModerateEventV2Timeout"
      },
      {
        "name": "untimeout",
        "type": "object",
        "description": "Optional . Metadata associated with the untimeout command.",
        "class_name": "TChannelModerateEventV2Untimeout"
      },
      {
        "name": "raid",
        "type": "object",
        "description": "Optional . Metadata associated with the raid command.",
        "class_name": "TChannelModerateEventV2Raid"
      },
      {
        "name": "unraid",
        "type": "object",
        "description": "Optional . Metadata associated with the unraid command.",
        "class_name": "TChannelModerateEventV2Unraid"
      },
      {
        "name": "delete",
        "type": "object",
        "description": "Optional . Metadata associated with the delete command.",
        "class_name": "TChannelModerateEventV2Delete"
      },
      {
        "name": "automod_terms",
        "type": "object",
        "description": "Optional . Metadata associated with the automod terms changes.",
        "class_name": "TChannelModerateEventV2AutomodTerms"
      },
      {
        "name": "unban_request",
        "type": "object",
        "description": "Optional . Metadata associated with an unban request.",
        "class_name": "TChannelModerateEventV2UnbanRequest"
      },
      {
        "name": "warn",
        "type": "object",
        "description": "Optional . Metadata associated with the warn command.",
        "class_name": "TChannelModerateEventV2Warn"
      },
      {
        "name": "shared_chat_ban",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_ban  event. Is null if  action  is not  shared_chat_ban . This field has the same information as the  ban  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_unban",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_unban  event. Is null if  action  is not  shared_chat_unban . This field has the same information as the  unban  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_timeout",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_timeout  event. Is null if  action  is not  shared_chat_timeout . This field has the same information as the  timeout  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_untimeout",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_untimeout  event. Is null if  action  is not  shared_chat_untimeout . This field has the same information as the  untimeout  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      },
      {
        "name": "shared_chat_delete",
        "type": "object",
        "description": "Optional . Information about the  shared_chat_delete  event. Is null if  action  is not  shared_chat_delete . This field has the same information as the  delete  field but for a action that happened for a channel in a shared chat session other than the broadcaster in the subscription condition."
      }
    ],
    "class_name": "TChannelModerateEventV2",
    "doclink": "#channel-moderate-event-v2"
  },
  {
    "name": "Channel Moderator Add Event",
    "id": "channel-moderator-add-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the new moderator."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the new moderator."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the new moderator."
      }
    ],
    "class_name": "TChannelModeratorAddEvent",
    "doclink": "#channel-moderator-add-event"
  },
  {
    "name": "Channel Moderator Remove Event",
    "id": "channel-moderator-remove-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the removed moderator."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the removed moderator."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the removed moderator."
      }
    ],
    "class_name": "TChannelModeratorRemoveEvent",
    "doclink": "#channel-moderator-remove-event"
  },
  {
    "name": "Channel Guest Star Session Begin Event",
    "id": "channel-guest-star-session-begin-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "session_id",
        "type": "string",
        "description": "ID representing the unique session that was started."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "RFC3339 timestamp indicating the time the session began."
      }
    ],
    "class_name": "TChannelGuestStarSessionBeginEvent",
    "doclink": "#channel-guest-star-session-begin-event"
  },
  {
    "name": "Channel Guest Star Session End Event",
    "id": "channel-guest-star-session-end-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The non-host broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The non-host broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The non-host broadcaster login."
      },
      {
        "name": "session_id",
        "type": "string",
        "description": "ID representing the unique session that was started."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "RFC3339 timestamp indicating the time the session began."
      },
      {
        "name": "ended_at",
        "type": "string",
        "description": "RFC3339 timestamp indicating the time the session ended."
      },
      {
        "name": "host_user_id",
        "type": "string",
        "description": "User ID of the host channel."
      },
      {
        "name": "host_user_name",
        "type": "string",
        "description": "The host display name."
      },
      {
        "name": "host_user_login",
        "type": "string",
        "description": "The host login."
      }
    ],
    "class_name": "TChannelGuestStarSessionEndEvent",
    "doclink": "#channel-guest-star-session-end-event"
  },
  {
    "name": "Channel Guest Star Guest Update Event",
    "id": "channel-guest-star-guest-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The non-host broadcaster user ID."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The non-host broadcaster display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The non-host broadcaster login."
      },
      {
        "name": "session_id",
        "type": "string",
        "description": "ID representing the unique session that was started."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator who updated the guest\u2019s state (could be the host).  null  if the update was performed by the guest."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The moderator display name. null  if the update was performed by the guest."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The moderator login.  null  if the update was performed by the guest."
      },
      {
        "name": "guest_user_id",
        "type": "string",
        "description": "The user ID of the guest who transitioned states in the session.  null  if the slot is now empty."
      },
      {
        "name": "guest_user_name",
        "type": "string",
        "description": "The guest display name.  null  if the slot is now empty."
      },
      {
        "name": "guest_user_login",
        "type": "string",
        "description": "The guest login.  null  if the slot is now empty."
      },
      {
        "name": "slot_id",
        "type": "string",
        "description": "The ID of the slot assignment the guest is assigned to.  null  if the guest is in the INVITED, REMOVED, READY, or ACCEPTED state."
      },
      {
        "name": "state",
        "type": "string",
        "description": "The current state of the user after the update has taken place.  null  if the slot is now empty. Can otherwise be one of the following:  invited  \u2014 The guest has transitioned to the invite queue. This can take place when the guest was previously assigned a slot, but have been removed from the call and are sent back to the invite queue. accepted  \u2014 The guest has accepted the invite and is currently in the process of setting up to join the session. ready  \u2014 The guest has signaled they are ready and can be assigned a slot. backstage  \u2014 The guest has been assigned a slot in the session, but is not currently seen live in the broadcasting software. live  \u2014 The guest is now live in the host's broadcasting software. removed  \u2014 The guest was removed from the call or queue. accepted  \u2014 The guest has accepted the invite to the call."
      },
      {
        "name": "host_user_id",
        "type": "string",
        "description": "User ID of the host channel."
      },
      {
        "name": "host_user_name",
        "type": "string",
        "description": "The host display name."
      },
      {
        "name": "host_user_login",
        "type": "string",
        "description": "The host login."
      },
      {
        "name": "host_video_enabled",
        "type": "bool",
        "description": "Flag that signals whether the host is allowing the slot\u2019s video to be seen by participants within the session.  null   if the guest is not slotted."
      },
      {
        "name": "host_audio_enabled",
        "type": "bool",
        "description": "Flag that signals whether the host is allowing the slot\u2019s audio to be heard by participants within the session.  null   if the guest is not slotted."
      },
      {
        "name": "host_volume",
        "type": "int",
        "description": "Value between 0-100 that represents the slot\u2019s audio level as heard by participants within the session.  null   if the guest is not slotted."
      }
    ],
    "class_name": "TChannelGuestStarGuestUpdateEvent",
    "doclink": "#channel-guest-star-guest-update-event"
  },
  {
    "name": "Channel Guest Star Settings Update Event",
    "id": "channel-guest-star-settings-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "User ID of the host channel."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name"
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "he broadcaster login."
      },
      {
        "name": "is_moderator_send_live_enabled",
        "type": "bool",
        "description": "Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot."
      },
      {
        "name": "slot_count",
        "type": "int",
        "description": "Number of slots the Guest Star call interface will allow the host to add to a call."
      },
      {
        "name": "is_browser_source_audio_enabled",
        "type": "bool",
        "description": "Flag determining if browser sources subscribed to sessions on this channel should output audio."
      },
      {
        "name": "group_layout",
        "type": "string",
        "description": "This setting determines how the guests within a session should be laid out within a group browser source. Can be one of the following values:  tiled  \u2014 All live guests are tiled within the browser source with the same size.  screenshare  \u2014 All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests. horizontal_top  \u2014 Indicates the group layout will contain all participants in a top-aligned horizontal stack. horizontal_bottom  \u2014 Indicates the group layout will contain all participants in a bottom-aligned horizontal stack. vertical_left  \u2014 Indicates the group layout will contain all participants in a left-aligned vertical stack. vertical_right  \u2014 Indicates the group layout will contain all participants in a right-aligned vertical stack."
      }
    ],
    "class_name": "TChannelGuestStarSettingsUpdateEvent",
    "doclink": "#channel-guest-star-settings-update-event"
  },
  {
    "name": "Channel Poll Begin Event",
    "id": "channel-poll-begin-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "ID of the poll."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Question displayed for the poll."
      },
      {
        "name": "choices",
        "type": "choices",
        "description": "An array of choices for the poll.",
        "link": "#choices",
        "id": "choices",
        "class_name": "TChoices"
      },
      {
        "name": "bits_voting",
        "type": "bits_voting",
        "description": "Not supported.",
        "link": "#bits-voting",
        "id": "bits-voting",
        "class_name": "TBitsVoting"
      },
      {
        "name": "channel_points_voting",
        "type": "channel_points_voting",
        "description": "The Channel Points voting settings for the poll.",
        "link": "#channel-points-voting",
        "id": "channel-points-voting",
        "class_name": "TChannelPointsVoting"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the poll started."
      },
      {
        "name": "ends_at",
        "type": "string",
        "description": "The time the poll will end."
      }
    ],
    "class_name": "TChannelPollBeginEvent",
    "doclink": "#channel-poll-begin-event"
  },
  {
    "name": "Channel Poll Progress Event",
    "id": "channel-poll-progress-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "ID of the poll."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Question displayed for the poll."
      },
      {
        "name": "choices",
        "type": "choices",
        "description": "An array of choices for the poll. Includes vote counts.",
        "link": "#choices",
        "id": "choices",
        "class_name": "TChoices"
      },
      {
        "name": "bits_voting",
        "type": "bits_voting",
        "description": "Not supported.",
        "link": "#bits-voting",
        "id": "bits-voting",
        "class_name": "TBitsVoting"
      },
      {
        "name": "channel_points_voting",
        "type": "channel_points_voting",
        "description": "The Channel Points voting settings for the poll.",
        "link": "#channel-points-voting",
        "id": "channel-points-voting",
        "class_name": "TChannelPointsVoting"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the poll started."
      },
      {
        "name": "ends_at",
        "type": "string",
        "description": "The time the poll will end."
      }
    ],
    "class_name": "TChannelPollProgressEvent",
    "doclink": "#channel-poll-progress-event"
  },
  {
    "name": "Channel Poll End Event",
    "id": "channel-poll-end-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "ID of the poll."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Question displayed for the poll."
      },
      {
        "name": "choices",
        "type": "choices",
        "description": "An array of choices for the poll. Includes vote counts.",
        "link": "#choices",
        "id": "choices",
        "class_name": "TChoices"
      },
      {
        "name": "bits_voting",
        "type": "bits_voting",
        "description": "Not supported.",
        "link": "#bits-voting",
        "id": "bits-voting",
        "class_name": "TBitsVoting"
      },
      {
        "name": "channel_points_voting",
        "type": "channel_points_voting",
        "description": "The Channel Points voting settings for the poll.",
        "link": "#channel-points-voting",
        "id": "channel-points-voting",
        "class_name": "TChannelPointsVoting"
      },
      {
        "name": "status",
        "type": "string",
        "description": "The status of the poll. Valid values are  completed ,  archived , and  terminated ."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the poll started."
      },
      {
        "name": "ended_at",
        "type": "string",
        "description": "The time the poll ended."
      }
    ],
    "class_name": "TChannelPollEndEvent",
    "doclink": "#channel-poll-end-event"
  },
  {
    "name": "Channel Points Automatic Reward Redemption Add Event",
    "id": "channel-points-automatic-reward-redemption-add-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the channel where the reward was redeemed."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the channel where the reward was redeemed."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the channel where the reward was redeemed."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the redeeming user."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the redeeming user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the redeeming user."
      },
      {
        "name": "id",
        "type": "string",
        "description": "The ID of the Redemption."
      },
      {
        "name": "reward",
        "type": "object",
        "description": "An object that contains the reward information.",
        "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventReward"
      },
      {
        "name": "message",
        "type": "object",
        "description": "An object that contains the user message and emote information needed to recreate the message.",
        "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventMessage"
      },
      {
        "name": "user_input",
        "type": "string",
        "description": "Optional. A string that the user entered if the reward requires input."
      },
      {
        "name": "redeemed_at",
        "type": "string",
        "description": "The UTC date and time (in RFC3339 format) of when the reward was redeemed."
      }
    ],
    "class_name": "TChannelPointsAutomaticRewardRedemptionAddEvent",
    "doclink": "#channel-points-automatic-reward-redemption-add-event"
  },
  {
    "name": "Channel Points Custom Reward Add Event",
    "id": "channel-points-custom-reward-add-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The reward identifier."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Is the reward currently enabled. If false, the reward won\u2019t show up to viewers."
      },
      {
        "name": "is_paused",
        "type": "boolean",
        "description": "Is the reward currently paused. If true, viewers can\u2019t redeem."
      },
      {
        "name": "is_in_stock",
        "type": "boolean",
        "description": "Is the reward currently in stock. If false, viewers can\u2019t redeem."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The reward title."
      },
      {
        "name": "cost",
        "type": "integer",
        "description": "The reward cost."
      },
      {
        "name": "prompt",
        "type": "string",
        "description": "The reward description."
      },
      {
        "name": "is_user_input_required",
        "type": "boolean",
        "description": "Does the viewer need to enter information when redeeming the reward."
      },
      {
        "name": "should_redemptions_skip_request_queue",
        "type": "boolean",
        "description": "Should redemptions be set to\u00a0 fulfilled \u00a0status immediately when redeemed and skip the request queue instead of the normal\u00a0 unfulfilled \u00a0status."
      },
      {
        "name": "max_per_stream",
        "type": "max_per_stream",
        "description": "Whether a maximum per stream is enabled and what the maximum is.",
        "link": "#max-per-stream",
        "id": "max-per-stream",
        "class_name": "TMaxPerStream"
      },
      {
        "name": "max_per_user_per_stream",
        "type": "max_per_user_per_stream",
        "description": "Whether a maximum per user per stream is enabled and what the maximum is.",
        "link": "#max-per-user-per-stream",
        "id": "max-per-user-per-stream",
        "class_name": "TMaxPerUserPerStream"
      },
      {
        "name": "background_color",
        "type": "string",
        "description": "Custom background color for the reward. Format: Hex with # prefix. Example:\u00a0 #FA1ED2 ."
      },
      {
        "name": "image",
        "type": "image",
        "description": "Set of custom images of 1x, 2x and 4x sizes for the reward. Can be\u00a0 null \u00a0if no images have been uploaded.",
        "link": "#image",
        "id": "image",
        "class_name": "TImage"
      },
      {
        "name": "default_image",
        "type": "image",
        "description": "Set of default images of 1x, 2x and 4x sizes for the reward.",
        "link": "#image",
        "id": "image",
        "class_name": "TImage"
      },
      {
        "name": "global_cooldown",
        "type": "global_cooldown",
        "description": "Whether a cooldown is enabled and what the cooldown is in seconds.",
        "link": "#global-cooldown",
        "id": "global-cooldown",
        "class_name": "TGlobalCooldown"
      },
      {
        "name": "cooldown_expires_at",
        "type": "string",
        "description": "Timestamp of the cooldown expiration.\u00a0 null \u00a0if the reward isn\u2019t on cooldown."
      },
      {
        "name": "redemptions_redeemed_current_stream",
        "type": "integer",
        "description": "The number of redemptions redeemed during the current live stream. Counts against the\u00a0 max_per_stream \u00a0limit.\u00a0 null \u00a0if the broadcasters stream isn\u2019t live or\u00a0 max_per_stream \u00a0isn\u2019t enabled."
      }
    ],
    "class_name": "TChannelPointsCustomRewardAddEvent",
    "doclink": "#channel-points-custom-reward-add-event"
  },
  {
    "name": "Channel Points Custom Reward Update Event",
    "id": "channel-points-custom-reward-update-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The reward identifier."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Is the reward currently enabled. If false, the reward won\u2019t show up to viewers."
      },
      {
        "name": "is_paused",
        "type": "boolean",
        "description": "Is the reward currently paused. If true, viewers can\u2019t redeem."
      },
      {
        "name": "is_in_stock",
        "type": "boolean",
        "description": "Is the reward currently in stock. If false, viewers can\u2019t redeem."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The reward title."
      },
      {
        "name": "cost",
        "type": "integer",
        "description": "The reward cost."
      },
      {
        "name": "prompt",
        "type": "string",
        "description": "The reward description."
      },
      {
        "name": "is_user_input_required",
        "type": "boolean",
        "description": "Does the viewer need to enter information when redeeming the reward."
      },
      {
        "name": "should_redemptions_skip_request_queue",
        "type": "boolean",
        "description": "Should redemptions be set to\u00a0 fulfilled \u00a0status immediately when redeemed and skip the request queue instead of the normal\u00a0 unfulfilled \u00a0status."
      },
      {
        "name": "max_per_stream",
        "type": "max_per_stream",
        "description": "Whether a maximum per stream is enabled and what the maximum is.",
        "link": "#max-per-stream",
        "id": "max-per-stream",
        "class_name": "TMaxPerStream"
      },
      {
        "name": "max_per_user_per_stream",
        "type": "max_per_user_per_stream",
        "description": "Whether a maximum per user per stream is enabled and what the maximum is.",
        "link": "#max-per-user-per-stream",
        "id": "max-per-user-per-stream",
        "class_name": "TMaxPerUserPerStream"
      },
      {
        "name": "background_color",
        "type": "string",
        "description": "Custom background color for the reward. Format: Hex with # prefix. Example:\u00a0 #FA1ED2 ."
      },
      {
        "name": "image",
        "type": "image",
        "description": "Set of custom images of 1x, 2x and 4x sizes for the reward. Can be\u00a0 null \u00a0if no images have been uploaded.",
        "link": "#image",
        "id": "image",
        "class_name": "TImage"
      },
      {
        "name": "default_image",
        "type": "image",
        "description": "Set of default images of 1x, 2x and 4x sizes for the reward.",
        "link": "#image",
        "id": "image",
        "class_name": "TImage"
      },
      {
        "name": "global_cooldown",
        "type": "global_cooldown",
        "description": "Whether a cooldown is enabled and what the cooldown is in seconds.",
        "link": "#global-cooldown",
        "id": "global-cooldown",
        "class_name": "TGlobalCooldown"
      },
      {
        "name": "cooldown_expires_at",
        "type": "string",
        "description": "Timestamp of the cooldown expiration.\u00a0 null \u00a0if the reward isn\u2019t on cooldown."
      },
      {
        "name": "redemptions_redeemed_current_stream",
        "type": "integer",
        "description": "The number of redemptions redeemed during the current live stream. Counts against the\u00a0 max_per_stream \u00a0limit.\u00a0 null \u00a0if the broadcasters stream isn\u2019t live or\u00a0 max_per_stream \u00a0isn\u2019t enabled."
      }
    ],
    "class_name": "TChannelPointsCustomRewardUpdateEvent",
    "doclink": "#channel-points-custom-reward-update-event"
  },
  {
    "name": "Channel Points Custom Reward Remove Event",
    "id": "channel-points-custom-reward-remove-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The reward identifier."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Is the reward currently enabled. If false, the reward won\u2019t show up to viewers."
      },
      {
        "name": "is_paused",
        "type": "boolean",
        "description": "Is the reward currently paused. If true, viewers can\u2019t redeem."
      },
      {
        "name": "is_in_stock",
        "type": "boolean",
        "description": "Is the reward currently in stock. If false, viewers can\u2019t redeem."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The reward title."
      },
      {
        "name": "cost",
        "type": "integer",
        "description": "The reward cost."
      },
      {
        "name": "prompt",
        "type": "string",
        "description": "The reward description."
      },
      {
        "name": "is_user_input_required",
        "type": "boolean",
        "description": "Does the viewer need to enter information when redeeming the reward."
      },
      {
        "name": "should_redemptions_skip_request_queue",
        "type": "boolean",
        "description": "Should redemptions be set to\u00a0 fulfilled \u00a0status immediately when redeemed and skip the request queue instead of the normal\u00a0 unfulfilled \u00a0status."
      },
      {
        "name": "max_per_stream",
        "type": "max_per_stream",
        "description": "Whether a maximum per stream is enabled and what the maximum is.",
        "link": "#max-per-stream",
        "id": "max-per-stream",
        "class_name": "TMaxPerStream"
      },
      {
        "name": "max_per_user_per_stream",
        "type": "max_per_user_per_stream",
        "description": "Whether a maximum per user per stream is enabled and what the maximum is.",
        "link": "#max-per-user-per-stream",
        "id": "max-per-user-per-stream",
        "class_name": "TMaxPerUserPerStream"
      },
      {
        "name": "background_color",
        "type": "string",
        "description": "Custom background color for the reward. Format: Hex with # prefix. Example:\u00a0 #FA1ED2 ."
      },
      {
        "name": "image",
        "type": "image",
        "description": "Set of custom images of 1x, 2x and 4x sizes for the reward. Can be\u00a0 null \u00a0if no images have been uploaded.",
        "link": "#image",
        "id": "image",
        "class_name": "TImage"
      },
      {
        "name": "default_image",
        "type": "image",
        "description": "Set of default images of 1x, 2x and 4x sizes for the reward.",
        "link": "#image",
        "id": "image",
        "class_name": "TImage"
      },
      {
        "name": "global_cooldown",
        "type": "global_cooldown",
        "description": "Whether a cooldown is enabled and what the cooldown is in seconds.",
        "link": "#global-cooldown",
        "id": "global-cooldown",
        "class_name": "TGlobalCooldown"
      },
      {
        "name": "cooldown_expires_at",
        "type": "string",
        "description": "Timestamp of the cooldown expiration.\u00a0 null \u00a0if the reward isn\u2019t on cooldown."
      },
      {
        "name": "redemptions_redeemed_current_stream",
        "type": "integer",
        "description": "The number of redemptions redeemed during the current live stream. Counts against the\u00a0 max_per_stream \u00a0limit.\u00a0 null \u00a0if the broadcasters stream isn\u2019t live or\u00a0 max_per_stream \u00a0isn\u2019t enabled."
      }
    ],
    "class_name": "TChannelPointsCustomRewardRemoveEvent",
    "doclink": "#channel-points-custom-reward-remove-event"
  },
  {
    "name": "Channel Points Custom Reward Redemption Add Event",
    "id": "channel-points-custom-reward-redemption-add-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The redemption identifier."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "User ID of the user that redeemed the reward."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "Login of the user that redeemed the reward."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "Display name of the user that redeemed the reward."
      },
      {
        "name": "user_input",
        "type": "string",
        "description": "The user input provided. Empty string if not provided."
      },
      {
        "name": "status",
        "type": "string",
        "description": "Defaults to\u00a0 unfulfilled . Possible values are\u00a0 unknown ,\u00a0 unfulfilled ,\u00a0 fulfilled , and\u00a0 canceled ."
      },
      {
        "name": "reward",
        "type": "reward",
        "description": "Basic information about the reward that was redeemed, at the time it was redeemed.",
        "link": "#reward",
        "id": "reward",
        "class_name": "TReward"
      },
      {
        "name": "redeemed_at",
        "type": "string",
        "description": "RFC3339 timestamp of when the reward was redeemed."
      }
    ],
    "class_name": "TChannelPointsCustomRewardRedemptionAddEvent",
    "doclink": "#channel-points-custom-reward-redemption-add-event"
  },
  {
    "name": "Channel Points Custom Reward Redemption Update Event",
    "id": "channel-points-custom-reward-redemption-update-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The redemption identifier."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "User ID of the user that redeemed the reward."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "Login of the user that redeemed the reward."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "Display name of the user that redeemed the reward."
      },
      {
        "name": "user_input",
        "type": "string",
        "description": "The user input provided. Empty string if not provided."
      },
      {
        "name": "status",
        "type": "string",
        "description": "Will be\u00a0 fulfilled \u00a0or\u00a0 canceled . Possible values are\u00a0 unknown ,\u00a0 unfulfilled ,\u00a0 fulfilled , and\u00a0 canceled ."
      },
      {
        "name": "reward",
        "type": "reward",
        "description": "Basic information about the reward that was redeemed, at the time it was redeemed.",
        "link": "#reward",
        "id": "reward",
        "class_name": "TReward"
      },
      {
        "name": "redeemed_at",
        "type": "string",
        "description": "RFC3339 timestamp of when the reward was redeemed."
      }
    ],
    "class_name": "TChannelPointsCustomRewardRedemptionUpdateEvent",
    "doclink": "#channel-points-custom-reward-redemption-update-event"
  },
  {
    "name": "Channel Prediction Begin Event",
    "id": "channel-prediction-begin-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "Channel Points Prediction ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Title for the Channel Points Prediction."
      },
      {
        "name": "outcomes",
        "type": "outcomes",
        "description": "An array of outcomes for the Channel Points Prediction.",
        "link": "#outcomes",
        "id": "outcomes",
        "class_name": "TOutcomes"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the Channel Points Prediction started."
      },
      {
        "name": "locks_at",
        "type": "string",
        "description": "The time the Channel Points Prediction will automatically lock."
      }
    ],
    "class_name": "TChannelPredictionBeginEvent",
    "doclink": "#channel-prediction-begin-event"
  },
  {
    "name": "Channel Prediction Progress Event",
    "id": "channel-prediction-progress-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "Channel Points Prediction ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Title for the Channel Points Prediction."
      },
      {
        "name": "outcomes",
        "type": "outcomes",
        "description": "An array of outcomes for the Channel Points Prediction. Includes  top_predictors .",
        "link": "#outcomes",
        "id": "outcomes",
        "class_name": "TOutcomes"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the Channel Points Prediction started."
      },
      {
        "name": "locks_at",
        "type": "string",
        "description": "The time the Channel Points Prediction will automatically lock."
      }
    ],
    "class_name": "TChannelPredictionProgressEvent",
    "doclink": "#channel-prediction-progress-event"
  },
  {
    "name": "Channel Prediction Lock Event",
    "id": "channel-prediction-lock-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "Channel Points Prediction ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Title for the Channel Points Prediction."
      },
      {
        "name": "outcomes",
        "type": "outcomes",
        "description": "An array of outcomes for the Channel Points Prediction. Includes  top_predictors .",
        "link": "#outcomes",
        "id": "outcomes",
        "class_name": "TOutcomes"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the Channel Points Prediction started."
      },
      {
        "name": "locked_at",
        "type": "string",
        "description": "The time the Channel Points Prediction was locked."
      }
    ],
    "class_name": "TChannelPredictionLockEvent",
    "doclink": "#channel-prediction-lock-event"
  },
  {
    "name": "Channel Prediction End Event",
    "id": "channel-prediction-end-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "Channel Points Prediction ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Title for the Channel Points Prediction."
      },
      {
        "name": "winning_outcome_id",
        "type": "string",
        "description": "ID of the winning outcome."
      },
      {
        "name": "outcomes",
        "type": "outcomes",
        "description": "An array of outcomes for the Channel Points Prediction. Includes  top_predictors .",
        "link": "#outcomes",
        "id": "outcomes",
        "class_name": "TOutcomes"
      },
      {
        "name": "status",
        "type": "string",
        "description": "The status of the Channel Points Prediction. Valid values are  resolved  and  canceled ."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time the Channel Points Prediction started."
      },
      {
        "name": "ended_at",
        "type": "string",
        "description": "The time the Channel Points Prediction ended."
      }
    ],
    "class_name": "TChannelPredictionEndEvent",
    "doclink": "#channel-prediction-end-event"
  },
  {
    "name": "Channel Shared Chat Session Begin Event",
    "id": "channel-shared-chat-session-begin-event",
    "params": [
      {
        "name": "session_id",
        "type": "string",
        "description": "The unique identifier for the shared chat session."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel in the subscription condition which is now active in the shared chat session."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the channel in the subscription condition which is now active in the shared chat session."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The user login of the channel in the subscription condition which is now active in the shared chat session."
      },
      {
        "name": "host_broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the host channel."
      },
      {
        "name": "host_broadcaster_user_name",
        "type": "string",
        "description": "The display name of the host channel."
      },
      {
        "name": "host_broadcaster_user_login",
        "type": "string",
        "description": "The user login of the host channel."
      },
      {
        "name": "participants",
        "type": "object",
        "description": "The list of participants in the session.",
        "class_name": "TChannelSharedChatSessionBeginEventParticipants"
      }
    ],
    "class_name": "TChannelSharedChatSessionBeginEvent",
    "doclink": "#channel-shared-chat-session-begin-event"
  },
  {
    "name": "Channel Shared Chat Session Update Event",
    "id": "channel-shared-chat-session-update-event",
    "params": [
      {
        "name": "session_id",
        "type": "string",
        "description": "The unique identifier for the shared chat session."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel in the subscription condition."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the channel in the subscription condition."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The user login of the channel in the subscription condition."
      },
      {
        "name": "host_broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the host channel."
      },
      {
        "name": "host_broadcaster_user_name",
        "type": "string",
        "description": "The display name of the host channel."
      },
      {
        "name": "host_broadcaster_user_login",
        "type": "string",
        "description": "The user login of the host channel."
      },
      {
        "name": "participants",
        "type": "object",
        "description": "The list of participants in the session.",
        "class_name": "TChannelSharedChatSessionUpdateEventParticipants"
      }
    ],
    "class_name": "TChannelSharedChatSessionUpdateEvent",
    "doclink": "#channel-shared-chat-session-update-event"
  },
  {
    "name": "Channel Shared Chat Session End Event",
    "id": "channel-shared-chat-session-end-event",
    "params": [
      {
        "name": "session_id",
        "type": "string",
        "description": "The unique identifier for the shared chat session."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the channel in the subscription condition which is no longer active in the shared chat session."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the channel in the subscription condition which is no longer active in the shared chat session."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The user login of the channel in the subscription condition which is no longer active in the shared chat session."
      },
      {
        "name": "host_broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the host channel."
      },
      {
        "name": "host_broadcaster_user_name",
        "type": "string",
        "description": "The display name of the host channel."
      },
      {
        "name": "host_broadcaster_user_login",
        "type": "string",
        "description": "The user login of the host channel."
      }
    ],
    "class_name": "TChannelSharedChatSessionEndEvent",
    "doclink": "#channel-shared-chat-session-end-event"
  },
  {
    "name": "Channel Subscription End Event",
    "id": "channel-subscription-end-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID for the user whose subscription ended."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user whose subscription ended."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user whose subscription ended."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "tier",
        "type": "string",
        "description": "The tier of the subscription that ended. Valid values are  1000 ,  2000 , and  3000 ."
      },
      {
        "name": "is_gift",
        "type": "boolean",
        "description": "Whether the subscription was a gift."
      }
    ],
    "class_name": "TChannelSubscriptionEndEvent",
    "doclink": "#channel-subscription-end-event"
  },
  {
    "name": "Channel Subscription Gift Event",
    "id": "channel-subscription-gift-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the user who sent the subscription gift. Set to  null  if it was an anonymous subscription gift."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the user who sent the gift. Set to  null  if it was an anonymous subscription gift."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name of the user who sent the gift. Set to  null  if it was an anonymous subscription gift."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "total",
        "type": "integer",
        "description": "The number of subscriptions in the subscription gift."
      },
      {
        "name": "tier",
        "type": "string",
        "description": "The tier of subscriptions in the subscription gift."
      },
      {
        "name": "cumulative_total",
        "type": "integer",
        "description": "The number of subscriptions gifted by this user in the channel. This value is  null  for anonymous gifts or if the gifter has opted out of sharing this information."
      },
      {
        "name": "is_anonymous",
        "type": "boolean",
        "description": "Whether the subscription gift was anonymous."
      }
    ],
    "class_name": "TChannelSubscriptionGiftEvent",
    "doclink": "#channel-subscription-gift-event"
  },
  {
    "name": "Channel Subscription Message Event",
    "id": "channel-subscription-message-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the user who sent a resubscription chat message."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the user who sent a resubscription chat message."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name of the user who a resubscription chat message."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster user ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster display name."
      },
      {
        "name": "tier",
        "type": "string",
        "description": "The tier of the user\u2019s subscription."
      },
      {
        "name": "message",
        "type": "message",
        "description": "An object that contains the resubscription message and emote information needed to recreate the message.",
        "link": "#message",
        "id": "message",
        "class_name": "TMessage"
      },
      {
        "name": "cumulative_months",
        "type": "integer",
        "description": "The total number of months the user has been subscribed to the channel."
      },
      {
        "name": "streak_months",
        "type": "integer",
        "description": "The number of consecutive months the user\u2019s current subscription has been active. This value is  null  if the user has opted out of sharing this information."
      },
      {
        "name": "duration_months",
        "type": "integer",
        "description": "The month duration of the subscription."
      }
    ],
    "class_name": "TChannelSubscriptionMessageEvent",
    "doclink": "#channel-subscription-message-event"
  },
  {
    "name": "Channel Suspicious User Update Event",
    "id": "channel-suspicious-user-update-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the channel where the treatment for a suspicious user was updated."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the channel where the treatment for a suspicious user was updated."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The Login of the channel where the treatment for a suspicious user was updated."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The ID of the moderator that updated the treatment for a suspicious user."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The display name of the moderator that updated the treatment for a suspicious user."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The login of the moderator that updated the treatment for a suspicious user."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the suspicious user whose treatment was updated."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the suspicious user whose treatment was updated."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the suspicious user whose treatment was updated."
      },
      {
        "name": "low_trust_status",
        "type": "string",
        "description": "The status set for the suspicious user. Can be the following: \u201cnone\u201d, \u201cactive_monitoring\u201d, or \u201crestricted\u201d."
      }
    ],
    "class_name": "TChannelSuspiciousUserUpdateEvent",
    "doclink": "#channel-suspicious-user-update-event"
  },
  {
    "name": "Channel Suspicious User Message Event",
    "id": "channel-suspicious-user-message-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the channel where the treatment for a suspicious user was updated."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the channel where the treatment for a suspicious user was updated."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the channel where the treatment for a suspicious user was updated."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the user that sent the message."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user that sent the message."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the user that sent the message."
      },
      {
        "name": "low_trust_status",
        "type": "string",
        "description": "The status set for the suspicious user. Can be the following: \u201cnone\u201d, \u201cactive_monitoring\u201d, or \u201crestricted\u201d"
      },
      {
        "name": "shared_ban_channel_ids",
        "type": "string[]",
        "description": "A list of channel IDs where the suspicious user is also banned."
      },
      {
        "name": "types",
        "type": "string[]",
        "description": "User types (if any) that apply to the suspicious user, can be \u201cmanual\u201d, \u201cban_evader_detector\u201d, or \u201cshared_channel_ban\u201d."
      },
      {
        "name": "ban_evasion_evaluation",
        "type": "string",
        "description": "A ban evasion likelihood value (if any) that as been applied to the user automatically by Twitch, can be \u201cunknown\u201d, \u201cpossible\u201d, or \u201clikely\u201d."
      },
      {
        "name": "message",
        "type": "object",
        "description": "The structured chat message.",
        "class_name": "TChannelSuspiciousUserMessageEventMessage"
      }
    ],
    "class_name": "TChannelSuspiciousUserMessageEvent",
    "doclink": "#channel-suspicious-user-message-event"
  },
  {
    "name": "Channel VIP Add Event",
    "id": "channel-vip-add-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user who was added as a VIP."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user who was added as a VIP."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the user who was added as a VIP."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the broadcaster."
      }
    ],
    "class_name": "TChannelVipAddEvent",
    "doclink": "#channel-vip-add-event"
  },
  {
    "name": "Channel VIP Remove Event",
    "id": "channel-vip-remove-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user who was removed as a VIP."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user who was removed as a VIP."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the user who was removed as a VIP."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The ID of the broadcaster."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the broadcaster."
      }
    ],
    "class_name": "TChannelVipRemoveEvent",
    "doclink": "#channel-vip-remove-event"
  },
  {
    "name": "Channel Warning Acknowledge Event",
    "id": "channel-warning-acknowledge-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The user ID of the broadcaster."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user that has acknowledged their warning."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user that has acknowledged their warning."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user that has acknowledged their warning."
      }
    ],
    "class_name": "TChannelWarningAcknowledgeEvent",
    "doclink": "#channel-warning-acknowledge-event"
  },
  {
    "name": "Channel Warning Send Event",
    "id": "channel-warning-send-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The user ID of the broadcaster."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The user name of the broadcaster."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "The user ID of the moderator who sent the warning."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The login of the moderator."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The user name of the moderator."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being warned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being warned."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Optional.  The reason given for the warning."
      },
      {
        "name": "chat_rules_cited",
        "type": "string[]",
        "description": "Optional.  The chat rules cited for the warning."
      }
    ],
    "class_name": "TChannelWarningSendEvent",
    "doclink": "#channel-warning-send-event"
  },
  {
    "name": "Charity Donation Event",
    "id": "charity-donation-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies the donation. The ID is unique across campaigns."
      },
      {
        "name": "campaign_id",
        "type": "string",
        "description": "An ID that identifies the charity campaign."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that\u2019s running the campaign."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "An ID that identifies the user that donated to the campaign."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user\u2019s display name."
      },
      {
        "name": "charity_name",
        "type": "string",
        "description": "The charity\u2019s name."
      },
      {
        "name": "charity_description",
        "type": "string",
        "description": "A description of the charity."
      },
      {
        "name": "charity_logo",
        "type": "string",
        "description": "A URL to an image of the charity\u2019s logo. The image\u2019s type is PNG and its size is 100px X 100px."
      },
      {
        "name": "charity_website",
        "type": "string",
        "description": "A URL to the charity\u2019s website."
      },
      {
        "name": "amount",
        "type": "object",
        "description": "An object that contains the amount of money that the user donated.",
        "class_name": "TCharityDonationEventAmount"
      }
    ],
    "class_name": "TCharityDonationEvent",
    "doclink": "#charity-donation-event"
  },
  {
    "name": "Charity Campaign Start Event",
    "id": "charity-campaign-start-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies the charity campaign."
      },
      {
        "name": "broadcaster_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that\u2019s running the campaign."
      },
      {
        "name": "broadcaster_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "charity_name",
        "type": "string",
        "description": "The charity\u2019s name."
      },
      {
        "name": "charity_description",
        "type": "string",
        "description": "A description of the charity."
      },
      {
        "name": "charity_logo",
        "type": "string",
        "description": "A URL to an image of the charity\u2019s logo. The image\u2019s type is PNG and its size is 100px X 100px."
      },
      {
        "name": "charity_website",
        "type": "string",
        "description": "A URL to the charity\u2019s website."
      },
      {
        "name": "current_amount",
        "type": "object",
        "description": "An object that contains the current amount of donations that the campaign has received.",
        "class_name": "TCharityCampaignStartEventCurrentAmount"
      },
      {
        "name": "target_amount",
        "type": "object",
        "description": "An object that contains the campaign\u2019s target fundraising goal.",
        "class_name": "TCharityCampaignStartEventTargetAmount"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster started the campaign."
      }
    ],
    "class_name": "TCharityCampaignStartEvent",
    "doclink": "#charity-campaign-start-event"
  },
  {
    "name": "Charity Campaign Progress Event",
    "id": "charity-campaign-progress-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies the charity campaign."
      },
      {
        "name": "broadcaster_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that\u2019s running the campaign."
      },
      {
        "name": "broadcaster_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "charity_name",
        "type": "string",
        "description": "The charity\u2019s name."
      },
      {
        "name": "charity_description",
        "type": "string",
        "description": "A description of the charity."
      },
      {
        "name": "charity_logo",
        "type": "string",
        "description": "A URL to an image of the charity\u2019s logo. The image\u2019s type is PNG and its size is 100px X 100px."
      },
      {
        "name": "charity_website",
        "type": "string",
        "description": "A URL to the charity\u2019s website."
      },
      {
        "name": "current_amount",
        "type": "object",
        "description": "An object that contains the current amount of donations that the campaign has received.",
        "class_name": "TCharityCampaignProgressEventCurrentAmount"
      },
      {
        "name": "target_amount",
        "type": "object",
        "description": "An object that contains the campaign\u2019s target fundraising goal.",
        "class_name": "TCharityCampaignProgressEventTargetAmount"
      }
    ],
    "class_name": "TCharityCampaignProgressEvent",
    "doclink": "#charity-campaign-progress-event"
  },
  {
    "name": "Charity Campaign Stop Event",
    "id": "charity-campaign-stop-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies the charity campaign."
      },
      {
        "name": "broadcaster_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that ran the campaign."
      },
      {
        "name": "broadcaster_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "charity_name",
        "type": "string",
        "description": "The charity\u2019s name."
      },
      {
        "name": "charity_description",
        "type": "string",
        "description": "A description of the charity."
      },
      {
        "name": "charity_logo",
        "type": "string",
        "description": "A URL to an image of the charity\u2019s logo. The image\u2019s type is PNG and its size is 100px X 100px."
      },
      {
        "name": "charity_website",
        "type": "string",
        "description": "A URL to the charity\u2019s website."
      },
      {
        "name": "current_amount",
        "type": "object",
        "description": "An object that contains the final amount of donations that the campaign received.",
        "class_name": "TCharityCampaignStopEventCurrentAmount"
      },
      {
        "name": "target_amount",
        "type": "object",
        "description": "An object that contains the campaign\u2019s target fundraising goal.",
        "class_name": "TCharityCampaignStopEventTargetAmount"
      },
      {
        "name": "stopped_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster stopped the campaign."
      }
    ],
    "class_name": "TCharityCampaignStopEvent",
    "doclink": "#charity-campaign-stop-event"
  },
  {
    "name": "Conduit Shard Disabled Event",
    "id": "conduit-shard-disabled-event",
    "params": [
      {
        "name": "conduit_id",
        "type": "string",
        "description": "The ID of the conduit."
      },
      {
        "name": "shard_id",
        "type": "string",
        "description": "The ID of the disabled shard."
      },
      {
        "name": "status",
        "type": "string",
        "description": "The new status of the transport."
      },
      {
        "name": "transport",
        "type": "object",
        "description": "The disabled transport."
      },
      {
        "name": "method",
        "type": "string",
        "description": "websocket \u00a0or\u00a0 webhook"
      },
      {
        "name": "callback",
        "type": "string",
        "description": "Optional. Webhook callback URL. Null if\u00a0 method  is set to  websocket ."
      },
      {
        "name": "session_id",
        "type": "string",
        "description": "Optional. WebSocket session ID. Null if\u00a0  method  is set to  webhook ."
      },
      {
        "name": "connected_at",
        "type": "string",
        "description": "Optional. Time that the WebSocket session connected. Null if\u00a0 method  is set to  webhook ."
      },
      {
        "name": "disconnected_at",
        "type": "string",
        "description": "Optional. Time that the WebSocket session disconnected. Null if\u00a0 method  is set to  webhook ."
      }
    ],
    "class_name": "TConduitShardDisabledEvent",
    "doclink": "#conduit-shard-disabled-event"
  },
  {
    "name": "Drop Entitlement Grant Event",
    "id": "drop-entitlement-grant-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "Individual event ID, as assigned by EventSub. Use this for de-duplicating messages."
      },
      {
        "name": "data",
        "type": "array",
        "description": "Entitlement object.",
        "class_name": "TDropEntitlementGrantEventData"
      }
    ],
    "class_name": "TDropEntitlementGrantEvent",
    "doclink": "#drop-entitlement-grant-event"
  },
  {
    "name": "Extension Bits Transaction Create Event",
    "id": "extension-bits-transaction-create-event",
    "params": [
      {
        "name": "extension_client_id",
        "type": "string",
        "description": "Client ID of the extension."
      },
      {
        "name": "id",
        "type": "string",
        "description": "Transaction ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The transaction\u2019s broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The transaction\u2019s broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The transaction\u2019s broadcaster display name."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The transaction\u2019s user ID."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The transaction\u2019s user login."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The transaction\u2019s user display name."
      },
      {
        "name": "product",
        "type": "product",
        "description": "Additional extension product information.",
        "link": "#product",
        "id": "product",
        "class_name": "TProduct"
      }
    ],
    "class_name": "TExtensionBitsTransactionCreateEvent",
    "doclink": "#extension-bits-transaction-create-event"
  },
  {
    "name": "Goals Event",
    "id": "goals-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies this event."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "An ID that uniquely identifies the broadcaster."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s user handle."
      },
      {
        "name": "type",
        "type": "string",
        "description": "The type of goal. Possible values are:  follow \u2014 The goal is to increase followers. subscription \u2014 The goal is to increase subscriptions. This type shows the net increase or decrease in tier points associated with the subscriptions. subscription_count \u2014 The goal is to increase subscriptions. This type shows the net increase or decrease in the number of subscriptions. new_subscription \u2014 The goal is to increase subscriptions. This type shows only the net increase in tier points associated with the subscriptions (it does not account for users that unsubscribed since the goal started). new_subscription_count \u2014 The goal is to increase subscriptions. This type shows only the net increase in the number of subscriptions (it does not account for users that unsubscribed since the goal started). new_bit \u2014 The goal is to increase the amount of Bits used on the channel. new_cheerer \u2014 The goal is to increase the number of unique Cheerers to Cheer on the channel."
      },
      {
        "name": "description",
        "type": "string",
        "description": "A description of the goal, if specified. The description may contain a maximum of 40 characters."
      },
      {
        "name": "is_achieved",
        "type": "boolean",
        "description": "A Boolean value that indicates whether the broadcaster achieved their goal. Is  true  if the goal was achieved; otherwise,  false . Only the  channel.goal.end  event includes this field."
      },
      {
        "name": "current_amount",
        "type": "integer",
        "description": "The goal\u2019s current value. The goal\u2019s  type  determines how this value is increased or decreased. If  type  is follow, this field is set to the broadcaster's current number of followers. This number increases with new followers and decreases when users unfollow the broadcaster. If  type  is subscription, this field is increased and decreased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased or decreased by 2, not 1. If  type  is subscription_count, this field is increased by 1 for each new subscription and decreased by 1 for each user that unsubscribes. If  type  is new_subscription, this field is increased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased by 2, not 1. If  type  is new_subscription_count, this field is increased by 1 for each new subscription."
      },
      {
        "name": "target_amount",
        "type": "integer",
        "description": "The goal\u2019s target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The UTC timestamp in  RFC 3339  format, which indicates when the broadcaster created the goal."
      },
      {
        "name": "ended_at",
        "type": "string",
        "description": "The UTC timestamp in  RFC 3339  format, which indicates when the broadcaster ended the goal. Only the  channel.goal.end  event includes this field."
      }
    ],
    "class_name": "TGoalsEvent",
    "doclink": "#goals-event"
  },
  {
    "name": "Hype Train Begin Event",
    "id": "hype-train-begin-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The Hype Train ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "total",
        "type": "integer",
        "description": "Total points contributed to the Hype Train."
      },
      {
        "name": "progress",
        "type": "integer",
        "description": "The number of points contributed to the Hype Train at the current level."
      },
      {
        "name": "goal",
        "type": "integer",
        "description": "The number of points required to reach the next level."
      },
      {
        "name": "top_contributions",
        "type": "top_contributions",
        "description": "The contributors with the most points contributed.",
        "link": "#top-contributions",
        "id": "top-contributions",
        "class_name": "TTopContributions"
      },
      {
        "name": "last_contribution",
        "type": "last_contribution",
        "description": "The most recent contribution.",
        "link": "#last-contribution",
        "id": "last-contribution",
        "class_name": "TLastContribution"
      },
      {
        "name": "level",
        "type": "integer",
        "description": "The starting level of the Hype Train."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time when the Hype Train started."
      },
      {
        "name": "expires_at",
        "type": "string",
        "description": "The time when the Hype Train expires. The expiration is extended when the Hype Train reaches a new level."
      },
      {
        "name": "is_golden_kappa_train",
        "type": "boolean",
        "description": "Indicates if the Hype Train is a Golden Kappa Train."
      }
    ],
    "class_name": "THypeTrainBeginEvent",
    "doclink": "#hype-train-begin-event"
  },
  {
    "name": "Hype Train Progress Event",
    "id": "hype-train-progress-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The Hype Train ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "level",
        "type": "integer",
        "description": "The current level of the Hype Train."
      },
      {
        "name": "total",
        "type": "integer",
        "description": "Total points contributed to the Hype Train."
      },
      {
        "name": "progress",
        "type": "integer",
        "description": "The number of points contributed to the Hype Train at the current level."
      },
      {
        "name": "goal",
        "type": "integer",
        "description": "The number of points required to reach the next level."
      },
      {
        "name": "top_contributions",
        "type": "top_contributions",
        "description": "The contributors with the most points contributed.",
        "link": "#top-contributions",
        "id": "top-contributions",
        "class_name": "TTopContributions"
      },
      {
        "name": "last_contribution",
        "type": "last_contribution",
        "description": "The most recent contribution.",
        "link": "#last-contribution",
        "id": "last-contribution",
        "class_name": "TLastContribution"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time when the Hype Train started."
      },
      {
        "name": "expires_at",
        "type": "string",
        "description": "The time when the Hype Train expires. The expiration is extended when the Hype Train reaches a new level."
      },
      {
        "name": "is_golden_kappa_train",
        "type": "boolean",
        "description": "Indicates if the Hype Train is a Golden Kappa Train."
      }
    ],
    "class_name": "THypeTrainProgressEvent",
    "doclink": "#hype-train-progress-event"
  },
  {
    "name": "Hype Train End Event",
    "id": "hype-train-end-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The Hype Train ID."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The requested broadcaster ID."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The requested broadcaster login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The requested broadcaster display name."
      },
      {
        "name": "level",
        "type": "integer",
        "description": "The final level of the Hype Train."
      },
      {
        "name": "total",
        "type": "integer",
        "description": "Total points contributed to the Hype Train."
      },
      {
        "name": "top_contributions",
        "type": "top_contributions",
        "description": "The contributors with the most points contributed.",
        "link": "#top-contributions",
        "id": "top-contributions",
        "class_name": "TTopContributions"
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The time when the Hype Train started."
      },
      {
        "name": "ended_at",
        "type": "string",
        "description": "The time when the Hype Train ended."
      },
      {
        "name": "cooldown_ends_at",
        "type": "string",
        "description": "The time when the Hype Train cooldown ends so that the next Hype Train can start."
      },
      {
        "name": "is_golden_kappa_train",
        "type": "boolean",
        "description": "Indicates if the Hype Train is a Golden Kappa Train."
      }
    ],
    "class_name": "THypeTrainEndEvent",
    "doclink": "#hype-train-end-event"
  },
  {
    "name": "Stream Online Event",
    "id": "stream-online-event",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The id of the stream."
      },
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster\u2019s user id."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s user login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s user display name."
      },
      {
        "name": "type",
        "type": "string",
        "description": "The stream type. Valid values are:\u00a0 live ,\u00a0 playlist ,\u00a0 watch_party ,\u00a0 premiere ,\u00a0 rerun ."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The timestamp at which the stream went online at."
      }
    ],
    "class_name": "TStreamOnlineEvent",
    "doclink": "#stream-online-event"
  },
  {
    "name": "Stream Offline Event",
    "id": "stream-offline-event",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The broadcaster\u2019s user id."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s user login."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s user display name."
      }
    ],
    "class_name": "TStreamOfflineEvent",
    "doclink": "#stream-offline-event"
  },
  {
    "name": "User Authorization Grant Event",
    "id": "user-authorization-grant-event",
    "params": [
      {
        "name": "client_id",
        "type": "string",
        "description": "The client_id of the application that was granted user access."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user id for the user who has granted authorization for your client id."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user who has granted authorization for your client id."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user who has granted authorization for your client id."
      }
    ],
    "class_name": "TUserAuthorizationGrantEvent",
    "doclink": "#user-authorization-grant-event"
  },
  {
    "name": "User Authorization Revoke Event",
    "id": "user-authorization-revoke-event",
    "params": [
      {
        "name": "client_id",
        "type": "string",
        "description": "The client_id of the application with revoked user access."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The user id for the user who has revoked authorization for your client id."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login for the user who has revoked authorization for your client id. This is\u00a0 null \u00a0if the user no longer exists."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name for the user who has revoked authorization for your client id. This is\u00a0 null \u00a0if the user no longer exists."
      }
    ],
    "class_name": "TUserAuthorizationRevokeEvent",
    "doclink": "#user-authorization-revoke-event"
  },
  {
    "name": "User Update Event",
    "id": "user-update-event",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user\u2019s user id."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user\u2019s user login."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user\u2019s user display name."
      },
      {
        "name": "email",
        "type": "string",
        "description": "The user\u2019s email address. The event includes the user\u2019s email address only if the app used to request this event type includes the  user:read:email  scope for the user; otherwise, the field is set to an empty string. See  Create EventSub Subscription ."
      },
      {
        "name": "email_verified",
        "type": "boolean",
        "description": "A Boolean value that determines whether Twitch has verified the user\u2019s email address. Is  true  if Twitch has verified the email address; otherwise, false. NOTE: Ignore this field if the  email  field contains an empty string."
      },
      {
        "name": "description",
        "type": "string",
        "description": "The user\u2019s description."
      }
    ],
    "class_name": "TUserUpdateEvent",
    "doclink": "#user-update-event"
  },
  {
    "name": "Whisper Received Event",
    "id": "whisper-received-event",
    "params": [
      {
        "name": "from_user_id",
        "type": "string",
        "description": "The ID of the user sending the message."
      },
      {
        "name": "from_user_name",
        "type": "string",
        "description": "The name of the user sending the message."
      },
      {
        "name": "from_user_login",
        "type": "string",
        "description": "The login of the user sending the message."
      },
      {
        "name": "to_user_id",
        "type": "string",
        "description": "The ID of the user receiving the message."
      },
      {
        "name": "to_user_name",
        "type": "string",
        "description": "The name of the user receiving the message."
      },
      {
        "name": "to_user_login",
        "type": "string",
        "description": "The login of the user receiving the message."
      },
      {
        "name": "whisper_id",
        "type": "string",
        "description": "The whisper ID."
      },
      {
        "name": "whisper",
        "type": "object",
        "description": "Object containing whisper information.",
        "class_name": "TWhisperReceivedEventWhisper"
      }
    ],
    "class_name": "TWhisperReceivedEvent",
    "doclink": "#whisper-received-event"
  },
  {
    "name": "Global Cooldown",
    "id": "global-cooldown",
    "params": [
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Is the setting enabled."
      },
      {
        "name": "seconds",
        "type": "integer",
        "description": "The cooldown in seconds."
      }
    ],
    "class_name": "TGlobalCooldown",
    "doclink": "#global-cooldown"
  },
  {
    "name": "Image",
    "id": "image",
    "params": [
      {
        "name": "url_1x",
        "type": "string",
        "description": "URL for the image at 1x size."
      },
      {
        "name": "url_2x",
        "type": "string",
        "description": "URL for the image at 2x size."
      },
      {
        "name": "url_4x",
        "type": "string",
        "description": "URL for the image at 4x size."
      }
    ],
    "class_name": "TImage",
    "doclink": "#image"
  },
  {
    "name": "Last Contribution",
    "id": "last-contribution",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user that made the contribution."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user\u2019s display name."
      },
      {
        "name": "type",
        "type": "string",
        "description": "The contribution method used. Possible values are:   bits  \u2014 Cheering with Bits. subscription  \u2014 Subscription activity like subscribing or gifting subscriptions. other  \u2014 Covers other contribution methods not listed."
      },
      {
        "name": "total",
        "type": "int",
        "description": "The total amount contributed. If  type  is  bits ,  total  represents the amount of Bits used. If  type  is  subscription ,  total  is 500, 1000, or 2500 to represent tier 1, 2, or 3 subscriptions, respectively."
      }
    ],
    "class_name": "TLastContribution",
    "doclink": "#last-contribution"
  },
  {
    "name": "Max Per Stream",
    "id": "max-per-stream",
    "params": [
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Is the setting enabled."
      },
      {
        "name": "value",
        "type": "integer",
        "description": "The max per stream limit."
      }
    ],
    "class_name": "TMaxPerStream",
    "doclink": "#max-per-stream"
  },
  {
    "name": "Max Per User Per Stream",
    "id": "max-per-user-per-stream",
    "params": [
      {
        "name": "is_enabled",
        "type": "boolean",
        "description": "Is the setting enabled."
      },
      {
        "name": "value",
        "type": "integer",
        "description": "The max per user per stream limit."
      }
    ],
    "class_name": "TMaxPerUserPerStream",
    "doclink": "#max-per-user-per-stream"
  },
  {
    "name": "Message",
    "id": "message",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The text of the resubscription chat message."
      },
      {
        "name": "emotes",
        "type": "emotes",
        "description": "An array that includes the emote ID and start and end positions for where the emote appears in the text.",
        "link": "#emotes",
        "id": "emotes",
        "class_name": "TEmotes"
      }
    ],
    "class_name": "TMessage",
    "doclink": "#message"
  },
  {
    "name": "Outcomes",
    "id": "outcomes",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The outcome ID."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The outcome title."
      },
      {
        "name": "color",
        "type": "string",
        "description": "The color for the outcome. Valid values are  pink  and  blue ."
      },
      {
        "name": "users",
        "type": "integer",
        "description": "The number of users who used Channel Points on this outcome."
      },
      {
        "name": "channel_points",
        "type": "int",
        "description": "The total number of Channel Points used on this outcome."
      },
      {
        "name": "top_predictors",
        "type": "top_predictors",
        "description": "An array of users who used the most Channel Points on this outcome.",
        "link": "#top-predictors",
        "id": "top-predictors",
        "class_name": "TTopPredictors"
      }
    ],
    "class_name": "TOutcomes",
    "doclink": "#outcomes"
  },
  {
    "name": "Product",
    "id": "product",
    "params": [
      {
        "name": "name",
        "type": "string",
        "description": "Product name."
      },
      {
        "name": "bits",
        "type": "integer",
        "description": "Bits involved in the transaction."
      },
      {
        "name": "sku",
        "type": "string",
        "description": "Unique identifier for the product acquired."
      },
      {
        "name": "in_development",
        "type": "boolean",
        "description": "Flag indicating if the product is in development. If  in_development  is true,  bits  will be 0."
      }
    ],
    "class_name": "TProduct",
    "doclink": "#product"
  },
  {
    "name": "Reward",
    "id": "reward",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The reward identifier."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The reward name."
      },
      {
        "name": "cost",
        "type": "integer",
        "description": "The reward cost."
      },
      {
        "name": "prompt",
        "type": "string",
        "description": "The reward description."
      }
    ],
    "class_name": "TReward",
    "doclink": "#reward"
  },
  {
    "name": "Shield Mode",
    "id": "shield-mode",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster whose Shield Mode status was updated."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "An ID that identifies the moderator that updated the Shield Mode\u2019s status. If the broadcaster updated the status, this ID will be the same as  broadcaster_user_id ."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The moderator\u2019s login name."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The moderator\u2019s display name."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the moderator activated Shield Mode. The object includes this field only for  channel.shield_mode.begin  events."
      },
      {
        "name": "ended_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the moderator deactivated Shield Mode. The object includes this field only for  channel.shield_mode.end  events."
      }
    ],
    "class_name": "TShieldMode",
    "doclink": "#shield-mode"
  },
  {
    "name": "Shoutout Create",
    "id": "shoutout-create",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that sent the Shoutout."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "to_broadcaster_user_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that received the Shoutout."
      },
      {
        "name": "to_broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "to_broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "description": "An ID that identifies the moderator that sent the Shoutout. If the broadcaster sent the Shoutout, this ID is the same as the ID in  broadcaster_user_id ."
      },
      {
        "name": "moderator_user_login",
        "type": "string",
        "description": "The moderator\u2019s login name."
      },
      {
        "name": "moderator_user_name",
        "type": "string",
        "description": "The moderator\u2019s display name."
      },
      {
        "name": "viewer_count",
        "type": "integer",
        "description": "The number of users that were watching the broadcaster\u2019s stream at the time of the Shoutout."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the moderator sent the Shoutout."
      },
      {
        "name": "cooldown_ends_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster may send a Shoutout to a different broadcaster."
      },
      {
        "name": "target_cooldown_ends_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster may send another Shoutout to the broadcaster in  to_broadcaster_user_id ."
      }
    ],
    "class_name": "TShoutoutCreate",
    "doclink": "#shoutout-create"
  },
  {
    "name": "Shoutout Received",
    "id": "shoutout-received",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that received the Shoutout."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "from_broadcaster_user_id",
        "type": "string",
        "description": "An ID that identifies the broadcaster that sent the Shoutout."
      },
      {
        "name": "from_broadcaster_user_login",
        "type": "string",
        "description": "The broadcaster\u2019s login name."
      },
      {
        "name": "from_broadcaster_user_name",
        "type": "string",
        "description": "The broadcaster\u2019s display name."
      },
      {
        "name": "viewer_count",
        "type": "integer",
        "description": "The number of users that were watching the from-broadcaster\u2019s stream at the time of the Shoutout."
      },
      {
        "name": "started_at",
        "type": "string",
        "description": "The UTC timestamp (in RFC3339 format) of when the moderator sent the Shoutout."
      }
    ],
    "class_name": "TShoutoutReceived",
    "doclink": "#shoutout-received"
  },
  {
    "name": "Subscription",
    "id": "subscription",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "Your client ID."
      },
      {
        "name": "type",
        "type": "string",
        "description": "The notification\u2019s subscription type."
      },
      {
        "name": "version",
        "type": "string",
        "description": "The version of the subscription."
      },
      {
        "name": "status",
        "type": "string",
        "description": "The status of the subscription."
      },
      {
        "name": "cost",
        "type": "integer",
        "description": "How much the subscription counts against your limit. See  Subscription Limits  for more information."
      },
      {
        "name": "condition",
        "type": "condition",
        "description": "Subscription-specific parameters.",
        "link": "#conditions",
        "id": "conditions"
      },
      {
        "name": "created_at",
        "type": "string",
        "description": "The time the notification was created."
      }
    ],
    "class_name": "TSubscription",
    "doclink": "#subscription"
  },
  {
    "name": "Top Contributions",
    "id": "top-contributions",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user that made the contribution."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user\u2019s login name."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user\u2019s display name."
      },
      {
        "name": "type",
        "type": "string",
        "description": "The contribution method used. Possible values are:  bits  \u2014 Cheering with Bits. subscription  \u2014 Subscription activity like subscribing or gifting subscriptions. other  \u2014 Covers other contribution methods not listed."
      },
      {
        "name": "total",
        "type": "int",
        "description": "The total amount contributed. If  type  is  bits ,  total  represents the amount of Bits used. If  type  is  subscription ,  total  is 500, 1000, or 2500 to represent tier 1, 2, or 3 subscriptions, respectively."
      }
    ],
    "class_name": "TTopContributions",
    "doclink": "#top-contributions"
  },
  {
    "name": "Top Predictors",
    "id": "top-predictors",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The display name of the user."
      },
      {
        "name": "channel_points_won",
        "type": "integer",
        "description": "The number of Channel Points won. This value is always  null  in the event payload for Prediction progress and Prediction lock. This value is 0 if the outcome did not win or if the Prediction was canceled and Channel Points were refunded."
      },
      {
        "name": "channel_points_used",
        "type": "integer",
        "description": "The number of Channel Points used to participate in the Prediction."
      }
    ],
    "class_name": "TTopPredictors",
    "doclink": "#top-predictors"
  },
  {
    "name": "Transport",
    "id": "transport",
    "params": [
      {
        "name": "method",
        "type": "string",
        "description": "The transport method. Possible values are:  webhook websocket",
        "required": "yes"
      },
      {
        "name": "callback",
        "type": "string",
        "description": "The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443. See  Processing an event . Specify this field only if  method  is set to  webhook . NOTE : Redirects are not followed.",
        "required": "no"
      },
      {
        "name": "secret",
        "type": "string",
        "description": "The secret used to verify the signature. The secret must be an ASCII string that\u2019s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see  Verifying the event message . Specify this field only if  method  is set to  webhook .",
        "required": "no"
      },
      {
        "name": "session_id",
        "type": "string",
        "description": "An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the  Welcome message . Specify this field only if  method  is set to  websocket .",
        "required": "no"
      },
      {
        "name": "connected_at",
        "type": "string",
        "description": "The UTC date and time that the WebSocket connection was established. This is a response-only field that  Create EventSub Subscription  and  Get EventSub Subscription  returns if the  method  field is set to  websocket .",
        "required": "no"
      },
      {
        "name": "disconnected_at",
        "type": "string",
        "description": "The UTC date and time that the WebSocket connection was lost. This is a response-only field that  Get EventSub Subscription  returns if the  method  field is set to  websocket .",
        "required": "no"
      }
    ],
    "class_name": "TTransport",
    "doclink": "#transport"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when users donate to their campaign.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TCharityDonationCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when they start a charity campaign.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TCharityCampaignStartCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when their campaign makes progress or is updated.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TCharityCampaignProgressCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when they stop a charity campaign.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TCharityCampaignStopCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when they activate Shield Mode.",
        "link": null,
        "id": null,
        "class_name": null
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster or one of the broadcaster\u2019s moderators.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TShieldModeBeginCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when they deactivate Shield Mode.",
        "link": null,
        "id": null,
        "class_name": null
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster or one of the broadcaster\u2019s moderators.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TShieldModeEndCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when they send a Shoutout.",
        "link": null,
        "id": null,
        "class_name": null
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that gave the Shoutout or one of the broadcaster\u2019s moderators.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TShoutoutCreateCondition"
  },
  {
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that you want to receive notifications about when they receive a Shoutout.",
        "link": null,
        "id": null,
        "class_name": null
      },
      {
        "name": "moderator_user_id",
        "type": "string",
        "required": "yes",
        "description": "The ID of the broadcaster that received the Shoutout or one of the broadcaster\u2019s moderators.",
        "link": null,
        "id": null,
        "class_name": null
      }
    ],
    "class_name": "TShoutoutReceivedCondition"
  },
  {
    "class_name": "TAutomodMessageHoldEventMessage",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The contents of the message caught by automod."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Metadata surrounding the potential inappropriate fragments of the message.",
        "class_name": "TAutomodMessageHoldEventFragments"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventFragments",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "Message text in a fragment."
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TAutomodMessageHoldEventEmote"
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TAutomodMessageHoldEventCheermote"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.    For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Message",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The contents of the message caught by automod."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Metadata surrounding the potential inappropriate fragments of the message.",
        "class_name": "TAutomodMessageHoldEventV2Fragments"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Fragments",
    "params": [
      {
        "name": "type",
        "type": "string",
        "description": "One of three options: text emote cheermote"
      },
      {
        "name": "text",
        "type": "string",
        "description": "Message text in a fragment."
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TAutomodMessageHoldEventV2Emote"
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TAutomodMessageHoldEventV2Cheermote"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Emote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Cheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.    For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Automod",
    "params": [
      {
        "name": "category",
        "type": "string",
        "description": "The category of the caught message."
      },
      {
        "name": "level",
        "type": "int",
        "description": "The level of severity (1-4)."
      },
      {
        "name": "boundaries",
        "type": "object[]",
        "description": "The bounds of the text that caused the message to be caught.",
        "class_name": "TAutomodMessageHoldEventV2Boundaries"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Boundaries",
    "params": [
      {
        "name": "start_pos",
        "type": "int",
        "description": "Index in the message for the start of the problem (0 indexed, inclusive)."
      },
      {
        "name": "end_pos",
        "type": "int",
        "description": "Index in the message for the end of the problem (0 indexed, inclusive)."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2BlockedTerm",
    "params": [
      {
        "name": "terms_found",
        "type": "object[]",
        "description": "The list of blocked terms found in the message.",
        "class_name": "TAutomodMessageHoldEventV2TermsFound"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2TermsFound",
    "params": [
      {
        "name": "term_id",
        "type": "string",
        "description": "The id of the blocked term found."
      },
      {
        "name": "boundary",
        "type": "object",
        "description": "The bounds of the text that caused the message to be caught.",
        "class_name": "TAutomodMessageHoldEventV2Boundary"
      },
      {
        "name": "owner_broadcaster_user_id",
        "type": "string",
        "description": "The id of the broadcaster that owns the blocked term."
      },
      {
        "name": "owner_broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster that owns the blocked term."
      },
      {
        "name": "owner_broadcaster_user_name",
        "type": "string",
        "description": "The username of the broadcaster that owns the blocked term."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageHoldEventV2Boundary",
    "params": [
      {
        "name": "start_pos",
        "type": "int",
        "description": "Index in the message for the start of the problem (0 indexed, inclusive)."
      },
      {
        "name": "end_pos",
        "type": "int",
        "description": "Index in the message for the end of the problem (0 indexed, inclusive)."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventMessage",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The contents of the message caught by automod."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Metadata surrounding the potential inappropriate fragments of the message.",
        "class_name": "TAutomodMessageUpdateEventFragments"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventFragments",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "Message text in a fragment."
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TAutomodMessageUpdateEventEmote"
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TAutomodMessageUpdateEventCheermote"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.    For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Message",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The contents of the message caught by automod."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Metadata surrounding the potential inappropriate fragments of the message.",
        "class_name": "TAutomodMessageUpdateEventV2Fragments"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Fragments",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "Message text in a fragment."
      },
      {
        "name": "type",
        "type": "string",
        "description": "One of three options: text emote cheermote"
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TAutomodMessageUpdateEventV2Emote"
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TAutomodMessageUpdateEventV2Cheermote"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Emote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Cheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.    For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Automod",
    "params": [
      {
        "name": "category",
        "type": "string",
        "description": "The category of the caught message."
      },
      {
        "name": "level",
        "type": "int",
        "description": "The level of severity (1-4)."
      },
      {
        "name": "boundaries",
        "type": "object[]",
        "description": "The bounds of the text that caused the message to be caught.",
        "class_name": "TAutomodMessageUpdateEventV2Boundaries"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Boundaries",
    "params": [
      {
        "name": "start_pos",
        "type": "int",
        "description": "Index in the message for the start of the problem (Starting at 0)."
      },
      {
        "name": "end_pos",
        "type": "int",
        "description": "Index in the message for the end of the problem (Starting at 0)."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2BlockedTerm",
    "params": [
      {
        "name": "terms_found",
        "type": "object[]",
        "description": "The list of blocked terms found in the message.",
        "class_name": "TAutomodMessageUpdateEventV2TermsFound"
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2TermsFound",
    "params": [
      {
        "name": "term_id",
        "type": "string",
        "description": "The id of the blocked term found."
      },
      {
        "name": "boundary",
        "type": "object",
        "description": "The bounds of the text that caused the message to be caught.",
        "class_name": "TAutomodMessageUpdateEventV2Boundary"
      },
      {
        "name": "owner_broadcaster_user_id",
        "type": "string",
        "description": "The id of the broadcaster that owns the blocked term."
      },
      {
        "name": "owner_broadcaster_user_login",
        "type": "string",
        "description": "The login of the broadcaster that owns the blocked term."
      },
      {
        "name": "owner_broadcaster_user_name",
        "type": "string",
        "description": "The username of the broadcaster that owns the blocked term."
      }
    ]
  },
  {
    "class_name": "TAutomodMessageUpdateEventV2Boundary",
    "params": [
      {
        "name": "start_pos",
        "type": "int",
        "description": "Index in the message for the start of the problem (0 indexed, inclusive)."
      },
      {
        "name": "end_pos",
        "type": "int",
        "description": "Index in the message for the end of the problem (0 indexed, inclusive)."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventMessage",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The chat message in plain text."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Ordered list of chat message fragments.",
        "class_name": "TChannelChatMessageEventFragments"
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventFragments",
    "params": [
      {
        "name": "type",
        "type": "string",
        "description": "The type of message fragment. Possible values:  text cheermote emote mention"
      },
      {
        "name": "text",
        "type": "string",
        "description": "Message text in fragment."
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional . Metadata pertaining to the cheermote.",
        "class_name": "TChannelChatMessageEventCheermote"
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional . Metadata pertaining to the emote.",
        "class_name": "TChannelChatMessageEventEmote"
      },
      {
        "name": "mention",
        "type": "object",
        "description": "Optional . Metadata pertaining to the mention.",
        "class_name": "TChannelChatMessageEventMention"
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}. For example, if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      },
      {
        "name": "owner_id",
        "type": "string",
        "description": "The ID of the broadcaster who owns the emote."
      },
      {
        "name": "format",
        "type": "string[]",
        "description": "The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if the emote is available as a static PNG and an animated GIF, the array contains static and animated. The possible formats are:  animated - An animated GIF is available for this emote. static - A static PNG file is available for this emote."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventMention",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the mentioned user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the mentioned user."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the mentioned user."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventBadges",
    "params": [
      {
        "name": "set_id",
        "type": "string",
        "description": "An ID that identifies this set of chat badges. For example, Bits or Subscriber."
      },
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde."
      },
      {
        "name": "info",
        "type": "string",
        "description": "Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventCheer",
    "params": [
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of Bits the user cheered."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventReply",
    "params": [
      {
        "name": "parent_message_id",
        "type": "string",
        "description": "An ID that uniquely identifies the parent message that this message is replying to."
      },
      {
        "name": "parent_message_body",
        "type": "string",
        "description": "The message body of the parent message."
      },
      {
        "name": "parent_user_id",
        "type": "string",
        "description": "User ID of the sender of the parent message."
      },
      {
        "name": "parent_user_name",
        "type": "string",
        "description": "User name of the sender of the parent message."
      },
      {
        "name": "parent_user_login",
        "type": "string",
        "description": "User login of the sender of the parent message."
      },
      {
        "name": "thread_message_id",
        "type": "string",
        "description": "An ID that identifies the parent message of the reply thread."
      },
      {
        "name": "thread_user_id",
        "type": "string",
        "description": "User ID of the sender of the thread\u2019s parent message."
      },
      {
        "name": "thread_user_name",
        "type": "string",
        "description": "User name of the sender of the thread\u2019s parent message."
      },
      {
        "name": "thread_user_login",
        "type": "string",
        "description": "User login of the sender of the thread\u2019s parent message."
      }
    ]
  },
  {
    "class_name": "TChannelChatMessageEventSourceBadges",
    "params": [
      {
        "name": "set_id",
        "type": "string",
        "description": "The ID that identifies this set of chat badges. For example, Bits or Subscriber."
      },
      {
        "name": "id",
        "type": "string",
        "description": "The ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde."
      },
      {
        "name": "info",
        "type": "string",
        "description": "Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventBadges",
    "params": [
      {
        "name": "set_id",
        "type": "string",
        "description": "An ID that identifies this set of chat badges. For example, Bits or Subscriber."
      },
      {
        "name": "id",
        "type": "string",
        "description": "An ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde."
      },
      {
        "name": "info",
        "type": "string",
        "description": "Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventMessage",
    "params": [
      {
        "name": "text",
        "type": "object",
        "description": "The chat message in plain text."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Ordered list of chat message fragments.",
        "class_name": "TChannelChatNotificationEventFragments"
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventFragments",
    "params": [
      {
        "name": "type",
        "type": "string",
        "description": "The type of message fragment. Possible values:  text cheermote emote mention"
      },
      {
        "name": "text",
        "type": "string",
        "description": "Message text in fragment."
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional . Metadata pertaining to the cheermote.",
        "class_name": "TChannelChatNotificationEventCheermote"
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional . Metadata pertaining to the emote.",
        "class_name": "TChannelChatNotificationEventEmote"
      },
      {
        "name": "mention",
        "type": "object",
        "description": "Optional .  Metadata pertaining to the mention.",
        "class_name": "TChannelChatNotificationEventMention"
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "object",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}. For example, if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      },
      {
        "name": "owner_id",
        "type": "string",
        "description": "The ID of the broadcaster who owns the emote."
      },
      {
        "name": "format",
        "type": "string[]",
        "description": "The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if the emote is available as a static PNG and an animated GIF, the array contains static and animated. The possible formats are:  animated - An animated GIF is available for this emote. static - A static PNG file is available for this emote."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventMention",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the mentioned user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the mentioned user."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the mentioned user."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventSub",
    "params": [
      {
        "name": "sub_tier",
        "type": "string",
        "description": "The type of subscription plan being used. Possible values are:  1000 - First level of paid or Prime subscription. 2000 - Second level of paid subscription. 3000 - Third level of paid subscription."
      },
      {
        "name": "is_prime",
        "type": "bool",
        "description": "Indicates if the subscription was obtained through Amazon Prime."
      },
      {
        "name": "duration_months",
        "type": "int",
        "description": "The number of months the subscription is for."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventResub",
    "params": [
      {
        "name": "cumulative_months",
        "type": "int",
        "description": "The total number of months the user has subscribed."
      },
      {
        "name": "duration_months",
        "type": "int",
        "description": "The number of months the subscription is for."
      },
      {
        "name": "streak_months",
        "type": "int",
        "description": "The total number of months the user has subscribed."
      },
      {
        "name": "sub_tier",
        "type": "string",
        "description": "The type of subscription plan being used. Possible values are:  1000 - First level of paid or Prime subscription. 2000 - Second level of paid subscription. 3000 - Third level of paid subscription."
      },
      {
        "name": "is_prime",
        "type": "bool",
        "description": "Optional . The number of consecutive months the user has subscribed."
      },
      {
        "name": "is_gift",
        "type": "bool",
        "description": "Whether or not the resub was a result of a gift."
      },
      {
        "name": "gifter_is_anonymous",
        "type": "bool",
        "description": "Optional . Whether or not the gift was anonymous."
      },
      {
        "name": "gifter_user_id",
        "type": "string",
        "description": "The user ID of the subscription gifter. Null if anonymous."
      },
      {
        "name": "gifter_user_name",
        "type": "string",
        "description": "The user name of the subscription gifter. Null if anonymous."
      },
      {
        "name": "gifter_user_login",
        "type": "string",
        "description": "Optional . The user login of the subscription gifter. Null if anonymous."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventSubGift",
    "params": [
      {
        "name": "duration_months",
        "type": "int",
        "description": "The number of months the subscription is for."
      },
      {
        "name": "cumulative_total",
        "type": "int",
        "description": "Optional . The amount of gifts the gifter has given in this channel. Null if anonymous."
      },
      {
        "name": "recipient_user_id",
        "type": "string",
        "description": "The user ID of the subscription gift recipient."
      },
      {
        "name": "recipient_user_name",
        "type": "string",
        "description": "The user name of the subscription gift recipient."
      },
      {
        "name": "recipient_user_login",
        "type": "string",
        "description": "The user login of the subscription gift recipient."
      },
      {
        "name": "sub_tier",
        "type": "string",
        "description": "The type of subscription plan being used. Possible values are:  1000 - First level of paid or Prime subscription. 2000 - Second level of paid subscription. 3000 - Third level of paid subscription."
      },
      {
        "name": "community_gift_id",
        "type": "string",
        "description": "Optional . The ID of the associated community gift. Null if not associated with a community gift."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventCommunitySubGift",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The ID of the associated community gift."
      },
      {
        "name": "total",
        "type": "int",
        "description": "Number of subscriptions being gifted."
      },
      {
        "name": "sub_tier",
        "type": "string",
        "description": "The type of subscription plan being used. Possible values are: <ul><li>1000 - First level of paid or Prime subscription.</li><li>2000 - Second level of paid subscription.</li><li>3000 - Third level of paid subscription.</li></ul>"
      },
      {
        "name": "cumulative_total",
        "type": "int",
        "description": "Optional . The amount of gifts the gifter has given in this channel. Null if anonymous."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventGiftPaidUpgrade",
    "params": [
      {
        "name": "gifter_is_anonymous",
        "type": "bool",
        "description": "Whether the gift was given anonymously."
      },
      {
        "name": "gifter_user_id",
        "type": "string",
        "description": "Optional . The user ID of the user who gifted the subscription. Null if anonymous."
      },
      {
        "name": "gifter_user_name",
        "type": "string",
        "description": "Optional . The user name of the user who gifted the subscription. Null if anonymous."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventPrimePaidUpgrade",
    "params": [
      {
        "name": "sub_tier",
        "type": "string",
        "description": "The type of subscription plan being used. Possible values are:  1000 - First level of paid or Prime subscription. 2000 - Second level of paid subscription. 3000 - Third level of paid subscription."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventPayItForward",
    "params": [
      {
        "name": "gifter_is_anonymous",
        "type": "bool",
        "description": "Whether the gift was given anonymously."
      },
      {
        "name": "gifter_user_id",
        "type": "string",
        "description": "The user ID of the user who gifted the subscription. Null if anonymous."
      },
      {
        "name": "gifter_user_name",
        "type": "string",
        "description": "Optional . The user name of the user who gifted the subscription. Null if anonymous."
      },
      {
        "name": "gifter_user_login",
        "type": "string",
        "description": "The user login of the user who gifted the subscription. Null if anonymous."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventRaid",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The user ID of the broadcaster raiding this channel."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the broadcaster raiding this channel."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login name of the broadcaster raiding this channel."
      },
      {
        "name": "viewer_count",
        "type": "int",
        "description": "The number of viewers raiding this channel from the broadcaster\u2019s channel."
      },
      {
        "name": "profile_image_url",
        "type": "string",
        "description": "Profile image URL of the broadcaster raiding this channel."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventAnnouncement",
    "params": [
      {
        "name": "color",
        "type": "string",
        "description": "Color of the announcement."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventBitsBadgeTier",
    "params": [
      {
        "name": "tier",
        "type": "int",
        "description": "The tier of the Bits badge the user just earned. For example, 100, 1000, or 10000."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventCharityDonation",
    "params": [
      {
        "name": "charity_name",
        "type": "string",
        "description": "Name of the charity."
      },
      {
        "name": "amount",
        "type": "object",
        "description": "An object that contains the amount of money that the user paid.",
        "class_name": "TChannelChatNotificationEventAmount"
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventAmount",
    "params": [
      {
        "name": "value",
        "type": "int",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550."
      },
      {
        "name": "decimal_place",
        "type": "int",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places."
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The  ISO-4217  three-letter currency code that identifies the type of currency in value."
      }
    ]
  },
  {
    "class_name": "TChannelChatNotificationEventSourceBadges",
    "params": [
      {
        "name": "set_id",
        "type": "string",
        "description": "The ID that identifies this set of chat badges. For example, Bits or Subscriber."
      },
      {
        "name": "id",
        "type": "string",
        "description": "The ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde."
      },
      {
        "name": "info",
        "type": "string",
        "description": "Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber."
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageHoldEventMessage",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The contents of the message caught by automod."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Ordered list of chat message fragments.",
        "class_name": "TChannelChatUserMessageHoldEventFragments"
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageHoldEventFragments",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "Message text in a fragment."
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TChannelChatUserMessageHoldEventEmote"
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TChannelChatUserMessageHoldEventCheermote"
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageHoldEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageHoldEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.    For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageUpdateEventMessage",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The contents of the message caught by automod."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Ordered list of chat message fragments.",
        "class_name": "TChannelChatUserMessageUpdateEventFragments"
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageUpdateEventFragments",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "Message text in a fragment."
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TChannelChatUserMessageUpdateEventEmote"
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TChannelChatUserMessageUpdateEventCheermote"
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageUpdateEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TChannelChatUserMessageUpdateEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.    For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "int",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "int",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventFollowers",
    "params": [
      {
        "name": "follow_duration_minutes",
        "type": "int",
        "description": "The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventSlow",
    "params": [
      {
        "name": "wait_time_seconds",
        "type": "int",
        "description": "The amount of time, in seconds, that users need to wait between sending messages."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventVip",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user gaining VIP status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user gaining VIP status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user gaining VIP status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventUnvip",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user losing VIP status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user losing VIP status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user losing VIP status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventMod",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user gaining mod status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user gaining mod status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user gaining mod status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventUnmod",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user losing mod status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user losing mod status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user losing mod status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventBan",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being banned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being banned."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being banned."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Optional . Reason given for the ban."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventUnban",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being unbanned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being unbanned."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being unbanned."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventTimeout",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being timed out."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being timed out."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being timed out."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Optional .. The reason given for the timeout."
      },
      {
        "name": "expires_at",
        "type": "string",
        "description": "The time at which the timeout ends."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventUntimeout",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being untimed out."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being untimed out."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user untimed out."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventRaid",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being raided."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being raided."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user raided."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user raided."
      },
      {
        "name": "viewer_count",
        "type": "int",
        "description": "The viewer count."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventUnraid",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user no longer being raided."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user no longer being raided."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the no longer user raided."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventDelete",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user whose message is being deleted."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message being deleted."
      },
      {
        "name": "message_body",
        "type": "string",
        "description": "The message body of the message being deleted."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventAutomodTerms",
    "params": [
      {
        "name": "action",
        "type": "string",
        "description": "Either \u201cadd\u201d or \u201cremove\u201d."
      },
      {
        "name": "list",
        "type": "string",
        "description": "Either \u201cblocked\u201d or \u201cpermitted\u201d."
      },
      {
        "name": "terms",
        "type": "string[]",
        "description": "Terms being added or removed."
      },
      {
        "name": "from_automod",
        "type": "bool",
        "description": "Whether the terms were added due to an Automod message approve/deny action."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventUnbanRequest",
    "params": [
      {
        "name": "is_approved",
        "type": "bool",
        "description": "Whether or not the unban request was approved or denied."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the banned user."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user."
      },
      {
        "name": "moderator_message",
        "type": "string",
        "description": "The message included by the moderator explaining their approval or denial."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Followers",
    "params": [
      {
        "name": "follow_duration_minutes",
        "type": "int",
        "description": "The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Slow",
    "params": [
      {
        "name": "wait_time_seconds",
        "type": "int",
        "description": "The amount of time, in seconds, that users need to wait between sending messages."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Vip",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user gaining VIP status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user gaining VIP status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user gaining VIP status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Unvip",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user losing VIP status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user losing VIP status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user losing VIP status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Mod",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user gaining mod status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user gaining mod status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user gaining mod status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Unmod",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user losing mod status."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user losing mod status."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user losing mod status."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Ban",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being banned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being banned."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being banned."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Optional . Reason given for the ban."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Unban",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being unbanned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being unbanned."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being unbanned."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Timeout",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being timed out."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being timed out."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being timed out."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Optional . The reason given for the timeout."
      },
      {
        "name": "expires_at",
        "type": "string",
        "description": "The time at which the timeout ends."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Untimeout",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being untimed out."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being untimed out."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user untimed out."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Raid",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being raided."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being raided."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user raided."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user raided."
      },
      {
        "name": "viewer_count",
        "type": "int",
        "description": "The viewer count."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Unraid",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user no longer being raided."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user no longer being raided."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the no longer user raided."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Delete",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user whose message is being deleted."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user."
      },
      {
        "name": "message_id",
        "type": "string",
        "description": "The ID of the message being deleted."
      },
      {
        "name": "message_body",
        "type": "string",
        "description": "The message body of the message being deleted."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2AutomodTerms",
    "params": [
      {
        "name": "action",
        "type": "string",
        "description": "Either \u201cadd\u201d or \u201cremove\u201d."
      },
      {
        "name": "list",
        "type": "string",
        "description": "Either \u201cblocked\u201d or \u201cpermitted\u201d."
      },
      {
        "name": "terms",
        "type": "string[]",
        "description": "Terms being added or removed."
      },
      {
        "name": "from_automod",
        "type": "bool",
        "description": "Whether the terms were added due to an Automod message approve/deny action."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2UnbanRequest",
    "params": [
      {
        "name": "is_approved",
        "type": "bool",
        "description": "Whether or not the unban request was approved or denied."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the banned user."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user."
      },
      {
        "name": "moderator_message",
        "type": "string",
        "description": "The message included by the moderator explaining their approval or denial."
      }
    ]
  },
  {
    "class_name": "TChannelModerateEventV2Warn",
    "params": [
      {
        "name": "user_id",
        "type": "string",
        "description": "The ID of the user being warned."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The login of the user being warned."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user name of the user being warned."
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Optional . Reason given for the warning."
      },
      {
        "name": "chat_rules_cited",
        "type": "string[]",
        "description": "Optional . Chat rules cited for the warning."
      }
    ]
  },
  {
    "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventReward",
    "params": [
      {
        "name": "type",
        "type": "string",
        "description": "The type of reward. One of:  single_message_bypass_sub_mode send_highlighted_message random_sub_emote_unlock chosen_sub_emote_unlock chosen_modified_sub_emote_unlock message_effect gigantify_an_emote celebration"
      },
      {
        "name": "cost",
        "type": "int",
        "description": "The reward cost."
      },
      {
        "name": "unlocked_emote",
        "type": "object",
        "description": "Optional. Emote that was unlocked.",
        "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventUnlockedEmote"
      }
    ]
  },
  {
    "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventUnlockedEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The emote ID."
      },
      {
        "name": "name",
        "type": "string",
        "description": "The human readable emote token."
      }
    ]
  },
  {
    "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventMessage",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The text of the chat message."
      },
      {
        "name": "emotes",
        "type": "object[]",
        "description": "An array that includes the emote ID and start and end positions for where the emote appears in the text.",
        "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventEmotes"
      }
    ]
  },
  {
    "class_name": "TChannelPointsAutomaticRewardRedemptionAddEventEmotes",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "The emote ID."
      },
      {
        "name": "begin",
        "type": "int",
        "description": "The index of where the Emote starts in the text."
      },
      {
        "name": "end",
        "type": "int",
        "description": "The index of where the Emote ends in the text."
      }
    ]
  },
  {
    "class_name": "TChannelSharedChatSessionBeginEventParticipants",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the participant channel."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the participant channel."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The user login of the participant channel."
      }
    ]
  },
  {
    "class_name": "TChannelSharedChatSessionUpdateEventParticipants",
    "params": [
      {
        "name": "broadcaster_user_id",
        "type": "string",
        "description": "The User ID of the participant channel."
      },
      {
        "name": "broadcaster_user_name",
        "type": "string",
        "description": "The display name of the participant channel."
      },
      {
        "name": "broadcaster_user_login",
        "type": "string",
        "description": "The user login of the participant channel."
      }
    ]
  },
  {
    "class_name": "TChannelSuspiciousUserMessageEventMessage",
    "params": [
      {
        "name": "message_id",
        "type": "string",
        "description": "The UUID that identifies the message."
      },
      {
        "name": "text",
        "type": "string",
        "description": "The chat message in plain text."
      },
      {
        "name": "fragments",
        "type": "object[]",
        "description": "Ordered list of chat message fragments.",
        "class_name": "TChannelSuspiciousUserMessageEventFragments"
      }
    ]
  },
  {
    "class_name": "TChannelSuspiciousUserMessageEventFragments",
    "params": [
      {
        "name": "type",
        "type": "string",
        "description": "The type of message fragment. Possible values: -text -cheermote -emote"
      },
      {
        "name": "text",
        "type": "string",
        "description": "Message text in fragment."
      },
      {
        "name": "cheermote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the cheermote.",
        "class_name": "TChannelSuspiciousUserMessageEventCheermote"
      },
      {
        "name": "emote",
        "type": "object",
        "description": "Optional. Metadata pertaining to the emote.",
        "class_name": "TChannelSuspiciousUserMessageEventEmote"
      }
    ]
  },
  {
    "class_name": "TChannelSuspiciousUserMessageEventCheermote",
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The name portion of the Cheermote string that you use in chat to cheer Bits. The full Cheermote string is the concatenation of {prefix} + {number of Bits}.      For example , if the prefix is \u201cCheer\u201d and you want to cheer 100 Bits, the full Cheermote string is Cheer100. When the Cheermote string is entered in chat, Twitch converts it to the image associated with the Bits tier that was cheered."
      },
      {
        "name": "bits",
        "type": "string",
        "description": "The amount of bits cheered."
      },
      {
        "name": "tier",
        "type": "string",
        "description": "The tier level of the cheermote."
      }
    ]
  },
  {
    "class_name": "TChannelSuspiciousUserMessageEventEmote",
    "params": [
      {
        "name": "id",
        "type": "string",
        "description": "An ID that uniquely identifies this emote."
      },
      {
        "name": "emote_set_id",
        "type": "string",
        "description": "An ID that identifies the emote set that the emote belongs to."
      }
    ]
  },
  {
    "class_name": "TCharityDonationEventAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "class_name": "TCharityCampaignStartEventCurrentAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "class_name": "TCharityCampaignStartEventTargetAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "class_name": "TCharityCampaignProgressEventCurrentAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "class_name": "TCharityCampaignProgressEventTargetAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "class_name": "TCharityCampaignStopEventCurrentAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "class_name": "TCharityCampaignStopEventTargetAmount",
    "params": [
      {
        "name": "value",
        "type": "integer",
        "description": "The monetary amount. The amount is specified in the currency\u2019s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD,  value  is set to 550."
      },
      {
        "name": "decimal_places",
        "type": "integer",
        "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate  value  from minor units to major units by using the formula: value / 10^decimal_places"
      },
      {
        "name": "currency",
        "type": "string",
        "description": "The ISO-4217 three-letter currency code that identifies the type of currency in  value ."
      }
    ]
  },
  {
    "name": "Drop Entitlement Grant Event",
    "id": "drop-entitlement-grant-event",
    "params": [
      {
        "name": "organization_id",
        "type": "string",
        "description": "The ID of the organization that owns the game that has Drops enabled."
      },
      {
        "name": "category_id",
        "type": "string",
        "description": "Twitch category ID of the game that was being played when this benefit was entitled."
      },
      {
        "name": "category_name",
        "type": "string",
        "description": "The category name."
      },
      {
        "name": "campaign_id",
        "type": "string",
        "description": "The campaign this entitlement is associated with."
      },
      {
        "name": "user_id",
        "type": "string",
        "description": "Twitch user ID of the user who was granted the entitlement."
      },
      {
        "name": "user_name",
        "type": "string",
        "description": "The user display name of the user who was granted the entitlement."
      },
      {
        "name": "user_login",
        "type": "string",
        "description": "The user login of the user who was granted the entitlement."
      },
      {
        "name": "entitlement_id",
        "type": "string",
        "description": "Unique identifier of the entitlement. Use this to de-duplicate entitlements."
      },
      {
        "name": "benefit_id",
        "type": "string",
        "description": "Identifier of the Benefit."
      },
      {
        "name": "created_at",
        "type": "string",
        "description": "UTC timestamp in ISO format when this entitlement was granted on Twitch."
      }
    ],
    "class_name": "TDropEntitlementGrantEventData",
    "doclink": "#drop-entitlement-grant-event"
  },
  {
    "class_name": "TWhisperReceivedEventWhisper",
    "params": [
      {
        "name": "text",
        "type": "string",
        "description": "The body of the whisper message."
      }
    ]
  }
]