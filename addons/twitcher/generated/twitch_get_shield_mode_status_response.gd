@tool
extends RefCounted

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchGetShieldModeStatusResponse

## A list that contains a single object with the broadcaster’s Shield Mode status.
var data: Array[Data]:
	set(val):
		data = val;
		changed_data["data"] = [];
		if data != null:
			for value in data:
				changed_data["data"].append(value.to_dict());

var changed_data: Dictionary = {};

static func from_json(d: Dictionary) -> TwitchGetShieldModeStatusResponse:
	var result = TwitchGetShieldModeStatusResponse.new();
	if d.has("data") && d["data"] != null:
		for value in d["data"]:
			result.data.append(Data.from_json(value));
	return result;

func to_dict() -> Dictionary:
	return changed_data;

func to_json() -> String:
	return JSON.stringify(to_dict());

## 
class Data extends RefCounted:
	## A Boolean value that determines whether Shield Mode is active. Is **true** if the broadcaster activated Shield Mode; otherwise, **false**.
	var is_active: bool:
		set(val):
			is_active = val;
			changed_data["is_active"] = is_active;
	## An ID that identifies the moderator that last activated Shield Mode. Is an empty string if Shield Mode hasn’t been previously activated.
	var moderator_id: String:
		set(val):
			moderator_id = val;
			changed_data["moderator_id"] = moderator_id;
	## The moderator’s login name. Is an empty string if Shield Mode hasn’t been previously activated.
	var moderator_login: String:
		set(val):
			moderator_login = val;
			changed_data["moderator_login"] = moderator_login;
	## The moderator’s display name. Is an empty string if Shield Mode hasn’t been previously activated.
	var moderator_name: String:
		set(val):
			moderator_name = val;
			changed_data["moderator_name"] = moderator_name;
	## The UTC timestamp (in RFC3339 format) of when Shield Mode was last activated. Is an empty string if Shield Mode hasn’t been previously activated.
	var last_activated_at: Variant:
		set(val):
			last_activated_at = val;
			changed_data["last_activated_at"] = last_activated_at;

	var changed_data: Dictionary = {};

	static func from_json(d: Dictionary) -> Data:
		var result = Data.new();
		if d.has("is_active") && d["is_active"] != null:
			result.is_active = d["is_active"];
		if d.has("moderator_id") && d["moderator_id"] != null:
			result.moderator_id = d["moderator_id"];
		if d.has("moderator_login") && d["moderator_login"] != null:
			result.moderator_login = d["moderator_login"];
		if d.has("moderator_name") && d["moderator_name"] != null:
			result.moderator_name = d["moderator_name"];
		if d.has("last_activated_at") && d["last_activated_at"] != null:
			result.last_activated_at = d["last_activated_at"];
		return result;

	func to_dict() -> Dictionary:
		return changed_data;

	func to_json() -> String:
		return JSON.stringify(to_dict());

