@tool
extends RefCounted

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchGameAnalytics

## An ID that identifies the game that the report was generated for.
var game_id: String:
	set(val):
		game_id = val;
		changed_data["game_id"] = game_id;
## The URL that you use to download the report. The URL is valid for 5 minutes.
var URL: String:
	set(val):
		URL = val;
		changed_data["URL"] = URL;
## The type of report.
var type: String:
	set(val):
		type = val;
		changed_data["type"] = type;
## The reporting window’s start and end dates, in RFC3339 format.
var date_range: DateRange:
	set(val):
		date_range = val;
		if date_range != null:
			changed_data["date_range"] = date_range.to_dict();

var changed_data: Dictionary = {};

static func from_json(d: Dictionary) -> TwitchGameAnalytics:
	var result = TwitchGameAnalytics.new();
	if d.has("game_id") && d["game_id"] != null:
		result.game_id = d["game_id"];
	if d.has("URL") && d["URL"] != null:
		result.URL = d["URL"];
	if d.has("type") && d["type"] != null:
		result.type = d["type"];
	if d.has("date_range") && d["date_range"] != null:
		result.date_range = DateRange.from_json(d["date_range"]);
	return result;

func to_dict() -> Dictionary:
	return changed_data;

func to_json() -> String:
	return JSON.stringify(to_dict());

## The reporting window’s start and end dates, in RFC3339 format.
class DateRange extends RefCounted:
	## The reporting window’s start date.
	var started_at: Variant:
		set(val):
			started_at = val;
			changed_data["started_at"] = started_at;
	## The reporting window’s end date.
	var ended_at: Variant:
		set(val):
			ended_at = val;
			changed_data["ended_at"] = ended_at;

	var changed_data: Dictionary = {};

	static func from_json(d: Dictionary) -> DateRange:
		var result = DateRange.new();
		if d.has("started_at") && d["started_at"] != null:
			result.started_at = d["started_at"];
		if d.has("ended_at") && d["ended_at"] != null:
			result.ended_at = d["ended_at"];
		return result;

	func to_dict() -> Dictionary:
		return changed_data;

	func to_json() -> String:
		return JSON.stringify(to_dict());

