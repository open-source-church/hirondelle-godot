@tool
extends RefCounted

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchSnoozeNextAdResponse

## A list that contains information about the channel’s snoozes and next upcoming ad after successfully snoozing.
var data: Array[Data]:
	set(val):
		data = val;
		changed_data["data"] = [];
		if data != null:
			for value in data:
				changed_data["data"].append(value.to_dict());

var changed_data: Dictionary = {};

static func from_json(d: Dictionary) -> TwitchSnoozeNextAdResponse:
	var result = TwitchSnoozeNextAdResponse.new();
	if d.has("data") && d["data"] != null:
		for value in d["data"]:
			result.data.append(Data.from_json(value));
	return result;

func to_dict() -> Dictionary:
	return changed_data;

func to_json() -> String:
	return JSON.stringify(to_dict());

## 
class Data extends RefCounted:
	## The number of snoozes available for the broadcaster.
	var snooze_count: int:
		set(val):
			snooze_count = val;
			changed_data["snooze_count"] = snooze_count;
	## The UTC timestamp when the broadcaster will gain an additional snooze, in RFC3339 format.
	var snooze_refresh_at: Variant:
		set(val):
			snooze_refresh_at = val;
			changed_data["snooze_refresh_at"] = snooze_refresh_at;
	## The UTC timestamp of the broadcaster’s next scheduled ad, in RFC3339 format.
	var next_ad_at: Variant:
		set(val):
			next_ad_at = val;
			changed_data["next_ad_at"] = next_ad_at;

	var changed_data: Dictionary = {};

	static func from_json(d: Dictionary) -> Data:
		var result = Data.new();
		if d.has("snooze_count") && d["snooze_count"] != null:
			result.snooze_count = d["snooze_count"];
		if d.has("snooze_refresh_at") && d["snooze_refresh_at"] != null:
			result.snooze_refresh_at = d["snooze_refresh_at"];
		if d.has("next_ad_at") && d["next_ad_at"] != null:
			result.next_ad_at = d["next_ad_at"];
		return result;

	func to_dict() -> Dictionary:
		return changed_data;

	func to_json() -> String:
		return JSON.stringify(to_dict());

